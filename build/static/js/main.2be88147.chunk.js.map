{"version":3,"sources":["components/deepCopy.js","calculate.js","checkValid.js","components/common/HomePageButton.jsx","components/HomePage.jsx","components/common/BackButton.jsx","components/GameSolver.jsx","components/common/Button.jsx","components/common/Slider.jsx","components/common/OperatorSettingButton.jsx","components/common/SettingWrapper.jsx","components/common/ToggleSwitch.jsx","components/SolveModeSettingMenu.jsx","components/common/useWindowSize.js","game.jsx","components/SolvePage.jsx","components/common/NameInputUI.jsx","components/SelectPage.jsx","components/common/RangeNumberInput.jsx","components/common/MenuExpand.jsx","components/MenuSetting.jsx","components/common/ExitRoomButton.jsx","components/Roster.jsx","components/roomConst.js","components/RoomInfo.jsx","components/HostPage.jsx","components/RoomNumInput.jsx","components/JoinRoomPage.jsx","components/WaitForHostPage.jsx","components/GameBoard.jsx","components/GameSideBar.jsx","components/MultiGamePage.jsx","components/CountDownPage.jsx","components/SingleGamePage.jsx","components/LoadingPage.jsx","components/solutionFunc.js","components/ScoresRank.jsx","components/common/shortenName.js","components/BetweenRoundPage.jsx","App.js","components/SummaryPage.jsx","serviceWorker.js","i18next.js","index.js","tabImage.png"],"names":["deepCopy","original","JSON","parse","stringify","operatorStack","operandStack","postfixStack","precedenceCheck","operator","isOperator","toCheck","charToOperator","char","plus","minus","multiply","divide","a","b","calculate","infix","postfix","current","operandRight","pop","operandLeft","undefined","computedNum","push","parseInt","computePostfix","forEach","length","removedOperator","splice","isParenthesis","i","infixToPostfix","parenRecursiveCheck","leftParamIndex","rightParamIndex","innerArr","opeNumCheck","operandNum","operatorNum","leftParamNum","rightParamNum","map","checkValid","paramPairIndex","leftParamStack","paramBalanceCount","paramPairFinder","HomePageButton","onClick","display","className","HomePage","props","useTranslation","t","i18n","useEffect","storedLang","localStorage","getItem","changeLanguage","langChange","style","height","pressSolveModeButton","pressGameModeButton","href","target","FacebookShareButton","url","quote","hashtag","bugReportButtonClick","BackButton","handleBack","prevPage","viewBox","fill","xmlns","fill-rule","stroke","stroke-width","d","GameSolver","numberCollection","eachNum","id","slotNum","Fragment","key","type","maxLength","onChange","e","inputNumHandler","value","Button","disabled","css","Slider","min","max","labelText","labelData","clear","OperatorSettingButton","checked","img","htmlFor","src","alt","SettingWrapper","children","ToggleSwitch","showAllAnswers","handleShowAllAnswers","SolveModeSettingMenu","targetNum","availableOperator","handleTargetNumChange","handleSlotNumChange","handleAvailableOperatorCheckbox","backToDefaultSettings","marginTop","includes","marginBottom","useWindowSize","useState","width","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","operators","answers","Set","Expression","left","op","right","this","isNumber","getValue","other","toString","arrayCopy","x","y","item","run","numOfSlots","inputNums","numbers","expList","n","solve","Math","abs","Number","EPSILON","add","j","remainList","k","newExpList","times","divides","result","answer","index","size","title","solutions","printResults","defaultNumberCollection","SolvePage","bottomFadeoutDisplay","setBottomFadeoutDisplay","topFadeoutDisplay","setTopFadeoutDisplay","settingMenuOpen","setSettingMenuOpen","setTargetNum","setSlotNum","setNumberCollection","setAvailableOperator","setShowAllAnswers","loading","setLoading","modalOpen","setModalOpen","$","scroll","scrollTop","document","getElementById","scrollHeight","screenWidth","operatorSwitch","ops","notifyError","filter","ele","copy_availableOperator","icon","faBars","faTimes","event","maxWidth","numberCollectionCopy","numNewValue","parseFloat","filledSlotNum","decimalNumExist","numSet","isInteger","color","NameInputUI","placeHolder","onSubmit","preventDefault","placeholder","autoFocus","SelectPage","setStateName","pressCreateRoomButton","pressJoinRoomButton","RangeNumberInput","MenuExpand","text","data-toggle","MenuSetting","menuExpanded","setMenuExpanded","handleRangeOfAvailableNumberLowBoundInput","rangeOfAvailableNumberLowBound","handleRangeOfAvailableNumberHighBoundInput","rangeOfAvailableNumberHighBound","maxRepeatNum","handleMaxRepeatNumInput","roundDuration","handleRoundDurationInput","numOfRound","handleNumOfRoundInput","ExitRoomButton","onCancel","fillRule","strokeWidth","Roster","playerRoster","playerSolved","pageController","playerColor","rosterVersion","eachName","faCheckCircle","faTimesCircle","solvedOrNot","backgroundColor","RoonInfo","roomNumber","fontSize","maxPlayerNum","HostPage","startCountDown","gameModeSettingMenuOpen","setGameModeSettingMenuOpenFalse","exitRoomButtonPress","switchSettingsMenu","pressMenuCloseButton","showMenuBoolean","waitTimeMax","autoStartReminder","pressStartGameButton","startGameButtonDisabled","RoomNumInput","componentDidMount","keydown","keyCode","closest","prev","select","keyup","next","val","replace","click","setRoomNum","Component","JoinRoomPage","username","pressJoinRoomKeyButton","WaitForHostPage","GameBoard","state","submitButtonRest","disableSubmitButtonTemp","setState","setTimeout","answerCorrectText","answerCorrect","attemptNum","findOperatorImage","ope","displayExpression","expressionInput","num","numberLength","gameNumbers","final_operators","leftRightParans","resultText","numberBtns","addNumToInput","multiplayerButtonDisable","submitButtonDisable","operateBtns","eachOpe","pressNoSolutionButton","inputField","readOnly","pressDeleteInputButton","faBackspace","pressCalculateResultButton","GameSideBar","switchScoresMenu","gameModeScoresMenuOpen","whichRound","multiplayerTotalScore","MultiGamePage","setGameModeScoresMenuOpenFalse","timeInGame","CountDownPage","textAlign","timeouts","SingleGamePage","clearTimeout","LoadingPage","solutionFunc","ScoresRank","scope","scoreRanking","pair","name","totalScore","shortenName","slice","SwiperCore","use","Pagination","startGameButtonTimeObj","BetweenRoundPage","slides","firstPlayerName","firstPlayerScore","secondPlayerName","secondPlayerScore","thirdPlayerName","thirdPlayerScore","solution","margin","playerSolutions","eachPlayer","isLastRound","playerRanking","transform","data-name","font-size","font-family","pagination","slide","position","top","SummaryPage","socket","io","connect","process","toast","configure","App","lang","gameModeBasicSetting","multiplayerGameNumbers","roomNumMaxDigitNum","multiplayerScore","hasValidUsername","message","error","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","notifySuccess","success","filterArray","arr","randomColor","floor","random","backToDefaultAllStates","confirmAlert","buttons","label","emit","stopListenToGameEvent","unlistenToServerDisconnect","exitSingleMode","removeAllListeners","listenToServerDisconnect","on","connected","once","roomNum","roster","setPlayerColor","msg","copyPlayerColor","playerName","failToStartGame","startGameTimtOutSec","settingPackageObject","targetNumber","availableOperators","rangeLo","rangeHi","maxNumOfRepeats","numOfRounds","waitForStartGame","settings","reassignSettings","time","console","log","createButtonDisableStatus","score","deductedScore","buttonDisableStatus","room","pressSinglePlayModeButton","copy_gameModeSetting","isNaN","copy_disableStatus","copy_expressionInput","deletedNum","getDigits","digits","digits_lastIndex","reformNumber","timeFactor","number","digit","areAllNumbersUsed","countDownInterval","setInterval","clearInterval","pageName","playerRosterLength","playerSolvedLength","hostAnswer","Helmet","charSet","content","rel","tabImage","renderSwitch","withTranslation","Boolean","location","hostname","match","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","whitelist","interpolation","escapeValue","options","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","ReactDOM","render","StrictMode","fallback","template","AlertTemplate","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.2be88147.chunk.js","sourcesContent":["/**\r\n * return a deepcopy of the original object\r\n * @param {any object} original \r\n */\r\nexport const deepCopy = (original) => {\r\n  return JSON.parse(JSON.stringify(original));\r\n};","let operatorStack = [];\r\nlet operandStack = [];\r\nlet postfixStack = [];\r\nconst TIMES = \"×\";\r\nconst DIVIDES = \"÷\";\r\nconst PLUS = \"+\";\r\nconst MINUS = \"-\";\r\nconst LEFT_PAREN = \"(\";\r\nconst RIGHT_PAREN = \")\";\r\n\r\n/**\r\n * return the precedence of the inputed operator\r\n * @param {string} operator \r\n */\r\n\r\nfunction precedenceCheck(operator) {\r\n  switch (operator) {\r\n    case PLUS:\r\n    case MINUS: return 1;\r\n    case TIMES:\r\n    case DIVIDES: return 2;\r\n    case LEFT_PAREN:\r\n    case RIGHT_PAREN: return 0;\r\n    default: return 0; //haven't handle this default yet\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {array of string} infix an array of string contains a valid infix expression\r\n * @returns {int} the calculated answer of the inputed string\r\n */\r\nfunction calculate(infix) {\r\n  let postfix = infixToPostfix(infix);\r\n  let result = computePostfix(postfix);\r\n  return result;\r\n}\r\n\r\n/**\r\n * From now on, the inputed infix expression is always valid, the validity check is done by RegEx\r\n * @param {array of string} infix an array of string contains a valid infix expression\r\n * @returns {array of string} an array of string contains the postfix expression \r\n */\r\nfunction infixToPostfix(infix) {\r\n  operatorStack = [];\r\n  operandStack = [];\r\n  postfixStack = [];\r\n  infix.forEach((current) => {\r\n    if (isOperator(current)) {\r\n      operatorStack.push(current);\r\n      //check the previous operators in the operatorStack\r\n      //if no previous operator, push the current onto the stack\r\n      //if has previous operators, check precedence\r\n      //->if the previous has equal or higher precedence, pop the previous one and move it to the operandStack\r\n      //-->once poped, keep checking the previous one\r\n      //->if the previous one has lower precedence, keep the previous one\r\n      if (operatorStack.length > 1) {\r\n        while (operatorStack.length > 1 && precedenceCheck(operatorStack[operatorStack.length - 2]) >= precedenceCheck(operatorStack[operatorStack.length - 1])) {\r\n          let removedOperator = operatorStack[operatorStack.length - 2];\r\n          operandStack.push(removedOperator);\r\n          operatorStack.splice(operatorStack.length - 2, 1);\r\n        }\r\n      }\r\n\r\n    } else if (isParenthesis(current)) {\r\n      //if it's left parentheses, just add to the operator stack\r\n      if (current === LEFT_PAREN) {\r\n        operatorStack.push(current);\r\n      } else {\r\n        //if it's right parentheses, find its corresponding left counterpart and move \r\n        //all the operators in between to the operand stack\r\n        for (let i = operatorStack.length - 1; i >= 0; i--) {\r\n          if (operatorStack[i] === LEFT_PAREN) { //find the corresponding left parentheses\r\n            operatorStack.splice(i, 1);\r\n            break;\r\n          } else {\r\n            let removedOperator = operatorStack[i];\r\n            operandStack.push(removedOperator);\r\n            operatorStack.splice(i, 1);\r\n          }\r\n        }\r\n      }\r\n\r\n    } else {\r\n      operandStack.push(current);\r\n    }\r\n  });\r\n\r\n  //if there still are operators in the stack, move them to the operand stack\r\n  if (operatorStack.length !== 0) {\r\n    for (let i = operatorStack.length - 1; i >= 0; i--) {\r\n      operandStack.push(operatorStack[i]);\r\n    }\r\n  }\r\n  return operandStack;\r\n}\r\n\r\n\r\n\r\nfunction isParenthesis(toCheck) {\r\n  switch (toCheck) {\r\n    case LEFT_PAREN:\r\n    case RIGHT_PAREN:\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @param {array of string} postfix an array of string which is the postfix expression\r\n * @returns {number} the computed result of the inputed postfix expression \r\n */\r\nfunction computePostfix(postfix) {\r\n  operatorStack = [];\r\n  operandStack = [];\r\n  postfixStack = [];\r\n  for (let current of postfix) {\r\n    if (isOperator(current)) {\r\n      let operandRight = postfixStack.pop();\r\n      let operandLeft = postfixStack.pop();\r\n      if (operandRight === undefined || operandLeft === undefined) {\r\n        return \"Invalid\";\r\n      }\r\n      let computedNum = compute(operandLeft, charToOperator(current), operandRight);\r\n      postfixStack.push(computedNum);\r\n    } else {\r\n      postfixStack.push(parseInt(current, 10));\r\n    }\r\n  }\r\n  return postfixStack[0];\r\n}\r\n\r\n/**\r\n * Check whether or not the input is an operator\r\n * @param {string} toCheck the character to be checked againest \r\n */\r\nfunction isOperator(toCheck) {\r\n  switch (toCheck) {\r\n    case PLUS:\r\n    case MINUS:\r\n    case TIMES:\r\n    case DIVIDES:\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\n/**\r\n * compute the result of an operation\r\n * @param {number} a the left operand \r\n * @param {function} operator the operator function\r\n * @param {number} b the right operand\r\n * @return {number} the computed result\r\n */\r\nfunction compute(a, operator, b) {\r\n  return operator(a, b);\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} char the char to be converted into its corresponding function \r\n */\r\nfunction charToOperator(char) {\r\n  switch (char) {\r\n    case PLUS: return plus;\r\n    case MINUS: return minus;\r\n    case TIMES: return multiply;\r\n    case DIVIDES: return divide;\r\n    default: return divide; //haven't handled this yet\r\n  }\r\n}\r\n\r\nfunction plus(a, b) { return a + b; }\r\nfunction minus(a, b) { return a - b; }\r\nfunction multiply(a, b) { return a * b; }\r\nfunction divide(a, b) { return a / b; }\r\n\r\nexport default calculate;\r\nexport { isOperator };","import { isOperator } from \"./calculate.js\";\r\n/**\r\n * \r\n * @param {array of string} infix the inputed expression from the user\r\n * @returns {bool} whether or not the inputed infix expression is a valid algebra expression \r\n */\r\n\r\nfunction checkValid(infix) {\r\n  if (!opeNumCheck(infix)) {\r\n    return false;\r\n  }\r\n\r\n  //at this stage, the number of the left and right parentheses are guaranteed to be the same \r\n  let paramPairIndex = [];\r\n  if (!paramPairFinder(infix, paramPairIndex)) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < paramPairIndex.length; i += 2) {\r\n    if (!parenRecursiveCheck(infix, paramPairIndex[i], paramPairIndex[i + 1])) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {array of string} infix the inputed expression from the user\r\n * @param {array of int} paramPairIndex contains the index for each left and right parenthesis pair\r\n * i.e. [1, 3, 5, 7] the first pair is at index 1 and 3, the second pair is at index 5 and 7\r\n * @returns whether or not the expression is valid\r\n */\r\nfunction paramPairFinder(infix, paramPairIndex) {\r\n  let leftParamStack = [];\r\n  let paramBalanceCount = 0;\r\n  for (let i = 0; i < infix.length; i++) {\r\n    if (infix[i] === '(') {\r\n      leftParamStack.push(i);\r\n      paramBalanceCount++;\r\n    } else if (infix[i] === ')') {\r\n      paramPairIndex.push(leftParamStack.pop());\r\n      paramPairIndex.push(i);\r\n      paramBalanceCount--;\r\n      //If there is a right param that doesn't have a left param in front of it\r\n      if (paramBalanceCount < 0) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * This function checks the expression inside every pair of parenthesis to\r\n * make sure that all of them are valid expression\r\n * @param {array of string} infix the expression to be checked on\r\n * @returns whether or not the infix is a valid expression\r\n */\r\nfunction parenRecursiveCheck(infix, leftParamIndex, rightParamIndex) {\r\n  let innerArr = [];\r\n  for (let i = leftParamIndex + 1; i < rightParamIndex; i++) {\r\n    innerArr.push(infix[i]);\r\n  }\r\n\r\n  return opeNumCheck(innerArr);\r\n}\r\n\r\n/**\r\n * This makes sure that the number of operators, operands, and parentheses in the expression\r\n * are valid and make sense\r\n * @param {array of string} infix the expression to be checked on\r\n * @returns whether or not the infix is a valid expression\r\n */\r\nfunction opeNumCheck(infix) {\r\n  let operandNum = 0;\r\n  let operatorNum = 0;\r\n  let leftParamNum = 0;\r\n  let rightParamNum = 0;\r\n  infix.map((char) => {\r\n    if (isOperator(char) === true) {\r\n      operatorNum++;\r\n    } else if (char === '(') {\r\n      leftParamNum++;\r\n    } else if (char === ')') {\r\n      rightParamNum++;\r\n    } else {\r\n      operandNum++;\r\n    }\r\n    return char;\r\n  });\r\n\r\n  //make sure that a number is not followed immediately by another number i.e. 4 4 +\r\n  for (let i = 1; i < infix.length; i++) {\r\n    if (!isOperator(infix[i]) && infix[i] !== '(' && infix[i] !== ')') {\r\n      if (!isOperator(infix[i - 1]) && infix[i - 1] !== '(' && infix[i - 1] !== ')') {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  //check for the number parenthesis, operator, and operand\r\n  if (operandNum - 1 !== operatorNum || leftParamNum !== rightParamNum) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport default checkValid;","import React from 'react';\r\nimport './HomePageButton.css'\r\n\r\n/**\r\n * the button for the homepage\r\n * why separate this from normal buttons?\r\n * Because home page buttons are fatter, so they need different css\r\n */\r\nconst HomePageButton = ({ onClick, display }) => {\r\n  return (<button\r\n    className=\"btn-outline grey-text btn\"\r\n    onClick={onClick}\r\n  >\r\n    {display}\r\n  </button>);\r\n}\r\n\r\nexport default HomePageButton;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faLanguage } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { TwitterShareButton, TwitterIcon, WeiboShareButton, FacebookShareButton, FacebookIcon } from \"react-share\";\r\nimport HomePageButton from './common/HomePageButton';\r\nimport $ from \"jquery\";\r\nimport './HomePage.css'\r\n\r\nfunction HomePage(props) {\r\n  //const elem = \"<FacebookShareButton url='https://github.com/du201/24-points-game' quote='This is such a great game!' hashtag='#24points'><FacebookIcon size={32} round={true} /></FacebookShareButton>\";\r\n\r\n  const { t, i18n } = useTranslation();\r\n  useEffect(() => {\r\n    let storedLang = localStorage.getItem('lang');\r\n    if (storedLang) {\r\n      i18n.changeLanguage(storedLang);\r\n      props.langChange(storedLang);\r\n    }\r\n  }, []);\r\n  // i18n.changeLanguage(props.lang);\r\n  const changeLang = () => {\r\n    if (props.lang === 'en') {\r\n      i18n.changeLanguage('zh');\r\n      props.langChange('zh');\r\n      localStorage.setItem('lang', 'zh');\r\n    } else if (props.lang === 'zh') {\r\n      i18n.changeLanguage('en');\r\n      props.langChange('en');\r\n      localStorage.setItem('lang', 'en');\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"container-fluid h-100\">\r\n      <div className=\"row\" style={{ height: \"10%\" }}>\r\n        <div className=\"my-auto\">\r\n          {/* <a id=\"change-lang\"\r\n            onClick={() => changeLang()}\r\n          >\r\n            <FontAwesomeIcon icon={faLanguage} size='3x' />\r\n          </a> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row\" style={{ height: \"80%\" }}>\r\n        <div className=\"col align-self-start text-center\">\r\n          <div className=\"title-homepage fnt-bold\">\r\n            24\r\n          </div>\r\n          <div className=\"d-inline-flex flex-column\">\r\n            <div className=\"btn-homepage fnt-bold\">\r\n              <HomePageButton\r\n                onClick={props.pressSolveModeButton}\r\n                display={t(\"Solver\")}\r\n              />\r\n            </div>\r\n            {/* // todo: add the singleplayer in August 2021 */}\r\n            {/* <div className=\"btn-homepage fnt-bold\">\r\n              <HomePageButton\r\n                onClick={props.pressSinglePlayModeButton}\r\n                display={t(\"Singleplayer\")}\r\n              />\r\n            </div> */}\r\n            <div className=\"btn-homepage fnt-bold\">\r\n              <HomePageButton\r\n                onClick={props.pressGameModeButton}\r\n                display={t(\"Multiplayer\")}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row\" style={{ height: \"10%\" }}>\r\n        <div className=\"col text-center my-auto\">\r\n          <div className=\"d-inline-flex flex-direction\">\r\n            <a href=\"https://github.com/du201/24-points-game\" target=\"_blank\" className=\"grey-text no-underline mx-4 link-homepage fnt-bold\">{t(\"ABOUT\")}</a>\r\n            <FacebookShareButton url='https://github.com/du201/24-points-game' quote='This is such a great game!' hashtag='#24points'><span className=\"grey-text no-underline mx-4 link-homepage fnt-bold\">{t(\"SHARE\")}</span></FacebookShareButton>\r\n            {/* <a href=\"#\" className=\"grey-text no-underline mx-4 link-homepage fnt-bold\" data-toggle=\"popover\" title=\"User Info\">{t(\"SHARE\")}</a> */}\r\n            <a href=\"https://github.com/du201/24-points-game\" target=\"_blank\" className=\"grey-text no-underline mx-4 link-homepage fnt-bold\">{t(\"SOURCE\")}</a>\r\n            <a href=\"#\" onClick={props.bugReportButtonClick} className=\"grey-text no-underline mx-4 link-homepage fnt-bold\">{t(\"BUG REPORT\")}</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport \"./BackButton.css\"\r\n\r\n/**\r\n *\r\n * handleBack: onClick function\r\n * prevPage: the previous page to go to\r\n */\r\nconst BackButton = ({ handleBack, prevPage }) => {\r\n  return (\r\n    //<React.Fragment>\r\n    <button\r\n      className=\"btn btn-back\"\r\n      onClick={() => {\r\n        handleBack(prevPage);\r\n      }}\r\n    >\r\n      <svg height=\"0.8rem\" viewBox=\"0 0 16 16\" className=\"btn-back-svg force-inline bi bi-chevron-left\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path fill-rule=\"evenodd\" stroke=\"#707070\" stroke-width=\"0.2rem\" d=\"M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\" />\r\n      </svg>\r\n      <div className=\"force-inline fnt-bold btn-back-text\">\r\n        Back\r\n      </div>\r\n    </button>\r\n    //</React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BackButton;\r\n","import React, { useEffect } from \"react\";\r\nimport \"./GameSolver.css\";\r\n// import $ from \"jquery\";\r\n\r\nconst GameSolver = (props) => {\r\n\r\n  //don't accept negative number for now\r\n  // useEffect(() => {\r\n  //   $(\".input-solveNum\").on(\"keyup\", function () {\r\n  //     $(this).val($(this).val().replace(/[^0-9]/g, ''));\r\n  //   })\r\n  // }, []);\r\n\r\n\r\n  return (props.numberCollection.map((eachNum) => {\r\n    return eachNum.id <= props.slotNum ? (\r\n      <React.Fragment key={eachNum.id}>\r\n        <div className=\"force-inline fnt-thin flex-grow-1\">\r\n          <input className=\"input-solveNum form-control inputs center-align\" type=\"Number\" maxLength=\"1\" onChange={(e) => props.inputNumHandler(e, eachNum.id)} value={eachNum.value === \"empty\" ? '' : eachNum.value} />\r\n        </div>\r\n        {props.slotNum === 4 && eachNum.id === 2 ? <div id=\"optional-flex-break\"></div> : null}\r\n        {props.slotNum > 4 && eachNum.id === 3 ? <div id=\"optional-flex-break\"></div> : null}\r\n      </React.Fragment>\r\n    ) : null;\r\n  }\r\n  ));\r\n}\r\n\r\nexport default GameSolver;","import React from 'react';\r\nimport \"./Button.css\";\r\n\r\n/**\r\n *\r\n * normal button\r\n * onClick: onClick function\r\n * display: the text displayed in the button\r\n * style: either 0(grey-white) or 1(blue-white)\r\n */\r\nconst Button = ({ onClick, display, style, disabled = false }) => {\r\n  let css = style === 0 ?\r\n    \"btn btn-blue\" :\r\n    \"btn btn-white\";\r\n  return (\r\n    <button\r\n      className={css + \" fnt-medium\"}\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n    >\r\n      {display}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport './Slider.css';\r\n\r\n/**\r\n * \r\n * A slider with its label above\r\n */\r\nconst Slider = ({ min, max, value, id, onChange, labelText, labelData }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <div style={{ clear: \"both\" }}>\r\n        <p className=\"fnt-bold float-left grey-text\">{labelText}</p>\r\n        <p className=\"float-right grey-text\">{labelData}</p>\r\n      </div>\r\n      <input\r\n        className=\"form-control-range\"\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        value={value}\r\n        id={id}\r\n        onChange={onChange}\r\n      ></input>\r\n    </React.Fragment>);\r\n}\r\n\r\nexport default Slider;","import React from 'react';\r\n\r\n/**\r\n * \r\n * used in the setting for choosing the available operators\r\n */\r\nconst OperatorSettingButton = ({ id, value, onChange, checked, img }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <input\r\n        type=\"checkbox\"\r\n        id={id}\r\n        value={value}\r\n        className=\"small-checkbox\"\r\n        onChange={onChange}\r\n        checked={checked}\r\n      />\r\n      <label htmlFor={id}>\r\n        <img src={img.src} alt={img.alt} />\r\n      </label>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default OperatorSettingButton;","import React from 'react';\r\nimport './SettingWrapper.css';\r\n\r\nconst SettingWrapper = ({ children }) => {\r\n  return (\r\n    <div className=\"setting-wrapper\">\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SettingWrapper;","import React from 'react';\r\nimport './ToggleSwitch.css';\r\n\r\nconst ToggleSwitch = ({ showAllAnswers, handleShowAllAnswers }) => {\r\n  return (\r\n    <label className=\"switch\">\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={showAllAnswers}\r\n        onChange={handleShowAllAnswers} />\r\n      <span className=\"slider round\"></span>\r\n    </label>\r\n  );\r\n}\r\n\r\nexport default ToggleSwitch;","import React from 'react';\r\nimport \"./MenuSetting.css\";\r\nimport Slider from \"./common/Slider\";\r\nimport OperatorSettingButton from \"./common/OperatorSettingButton\";\r\nimport SettingWrapper from \"./common/SettingWrapper\";\r\nimport Button from \"./common/Button\";\r\nimport ToggleSwitch from './common/ToggleSwitch';\r\n\r\nconst TIMES = \"×\";\r\nconst DIVIDES = \"÷\";\r\nconst PLUS = \"+\";\r\nconst MINUS = \"-\";\r\nconst SolveModeSettingMenu = ({ slotNum,\r\n  targetNum,\r\n  availableOperator,\r\n  showAllAnswers,\r\n  handleTargetNumChange,\r\n  handleSlotNumChange,\r\n  handleAvailableOperatorCheckbox,\r\n  handleShowAllAnswers,\r\n  backToDefaultSettings }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <div style={{ marginTop: \"5rem\" }}>\r\n        <SettingWrapper>\r\n          <Slider\r\n            min=\"12\"\r\n            max=\"36\"\r\n            value={targetNum}\r\n            id=\"targetNum\"\r\n            onChange={handleTargetNumChange}\r\n            labelText=\"Target Number\"\r\n            labelData={targetNum}\r\n          />\r\n        </SettingWrapper>\r\n      </div>\r\n      <SettingWrapper>\r\n        <Slider\r\n          min=\"2\"\r\n          max=\"6\"\r\n          value={slotNum}\r\n          id=\"slots\"\r\n          onChange={handleSlotNumChange}\r\n          labelText=\"Number of slots\"\r\n          labelData={slotNum}\r\n        />\r\n      </SettingWrapper>\r\n\r\n\r\n      {/*Checkbox for available operators */}\r\n      <SettingWrapper>\r\n        <span className=\"fnt-bold grey-text\">Available operators<br /></span>\r\n\r\n        <OperatorSettingButton\r\n          id=\"checkAdd\"\r\n          value={PLUS}\r\n          onChange={handleAvailableOperatorCheckbox}\r\n          checked={availableOperator.includes(PLUS)}\r\n          img={{ src: \"addSign.png\", alt: \"add\" }}\r\n        />\r\n\r\n        <OperatorSettingButton\r\n          id=\"checkSubtract\"\r\n          value={MINUS}\r\n          onChange={handleAvailableOperatorCheckbox}\r\n          checked={availableOperator.includes(MINUS)}\r\n          img={{ src: \"subtractSign.png\", alt: \"subtract\" }}\r\n        />\r\n\r\n        <OperatorSettingButton\r\n          id=\"checkMultiply\"\r\n          value={TIMES}\r\n          onChange={handleAvailableOperatorCheckbox}\r\n          checked={availableOperator.includes(TIMES)}\r\n          img={{ src: \"multiplySign.png\", alt: \"multiply\" }}\r\n        />\r\n\r\n        <OperatorSettingButton\r\n          id=\"checkDivide\"\r\n          value={DIVIDES}\r\n          onChange={handleAvailableOperatorCheckbox}\r\n          checked={availableOperator.includes(DIVIDES)}\r\n          img={{ src: \"divideSign.png\", alt: \"divide\" }}\r\n        />\r\n\r\n      </SettingWrapper>\r\n\r\n      <SettingWrapper>\r\n        <span className=\"fnt-bold grey-text\">Show all answers<br /></span>\r\n        <div style={{ marginTop: \"1.4rem\" }}></div>\r\n        <ToggleSwitch\r\n          showAllAnswers={showAllAnswers}\r\n          handleShowAllAnswers={handleShowAllAnswers} />\r\n      </SettingWrapper>\r\n\r\n      <div id=\"default-button\" className=\"row justify-content-center\" style={{ marginBottom: \"2rem\" }}>\r\n        {/* <div id=\"default-button\"> */}\r\n        <Button\r\n          onClick={backToDefaultSettings}\r\n          display=\"Default\"\r\n          style={1}\r\n        />\r\n      </div>\r\n\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default SolveModeSettingMenu;","import { useState, useEffect } from 'react';\r\n\r\nexport function useWindowSize() {\r\n  // Initialize state with undefined width/height so server and client renders match\r\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined,\r\n    height: undefined,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Handler to call on window resize\r\n    function handleResize() {\r\n      // Set window width/height to state\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n\r\n    // Add event listener\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    // Call handler right away so state gets updated with initial window size\r\n    handleResize();\r\n\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []); // Empty array ensures that effect is only run on mount\r\n\r\n  return windowSize;\r\n}","import React from 'react';\r\nconst TIMES = \"×\";\r\nconst DIVIDES = \"÷\";\r\nconst PLUS = \"+\";\r\nconst MINUS = \"-\";\r\nlet operators = [TIMES, DIVIDES, PLUS, MINUS];\r\nlet target = 24;\r\nlet answers = new Set();\r\n\r\nclass Expression {\r\n  constructor(value, left, op, right) {\r\n    if (value !== null && left === undefined &&\r\n      op === undefined && right === undefined) {\r\n      this.isNumber = true;\r\n      this.value = value;\r\n      this.left = null;\r\n      this.right = null;\r\n      this.operator = null;\r\n    } else if (value === null && left !== undefined &&\r\n      op !== undefined && right !== undefined) {\r\n      this.isNumber = false;\r\n      this.value = null;\r\n      this.left = left;\r\n      this.right = right;\r\n      this.operator = op;\r\n    }\r\n  }\r\n\r\n  isNumber() {\r\n    return this.isNumber;\r\n  }\r\n\r\n  getValue() {\r\n    if (this.isNumber) {\r\n      return this.value;\r\n    } else {\r\n      if (this.operator === TIMES) {\r\n        return this.left.getValue() * this.right.getValue();\r\n      }\r\n      if (this.operator === DIVIDES) {\r\n        return this.left.getValue() / this.right.getValue();\r\n      }\r\n      if (this.operator === PLUS) {\r\n        return this.left.getValue() + this.right.getValue();\r\n      }\r\n      if (this.operator === MINUS) {\r\n        return this.left.getValue() - this.right.getValue();\r\n      }\r\n    }\r\n  }\r\n\r\n  getOperator() {\r\n    return this.operator;\r\n  }\r\n\r\n  times(other) {\r\n    return new Expression(null, this, TIMES, other);\r\n  }\r\n\r\n  divides(other) {\r\n    return new Expression(null, this, DIVIDES, other);\r\n  }\r\n\r\n  plus(other) {\r\n    return new Expression(null, this, PLUS, other);\r\n  }\r\n\r\n  minus(other) {\r\n    return new Expression(null, this, MINUS, other);\r\n  }\r\n\r\n  toString() {\r\n    if (this.isNumber) {\r\n      return this.value.toString();\r\n    } else {\r\n      let left = this.left.toString();\r\n      let right = this.right.toString();\r\n\r\n      if (this.operator === TIMES || this.operator === DIVIDES) {\r\n        if (this.left.operator === PLUS || this.left.operator === MINUS) {\r\n          left = \"(\" + left + \")\";\r\n        }\r\n        if (this.right.operator === PLUS || this.right.operator === MINUS) {\r\n          right = \"(\" + right + \")\";\r\n        }\r\n      }\r\n      if (this.operator === DIVIDES) {\r\n        if (this.right.operator === TIMES || this.right.operator === DIVIDES) {\r\n          right = \"(\" + right + \")\";\r\n        }\r\n      }\r\n      if (this.operator === MINUS) {\r\n        if (this.right.operator === PLUS || this.right.operator === MINUS) {\r\n          right = \"(\" + right + \")\";\r\n        }\r\n      }\r\n      return left + this.operator + right;\r\n    }\r\n  }\r\n}\r\n\r\nfunction arrayCopy(x) {\r\n  let y = [];\r\n  for (let item of x) {\r\n    y.push(item);\r\n  }\r\n  return y;\r\n}\r\n\r\nfunction solve(expList) {\r\n  if (expList === null || expList.length === 0) {\r\n    return;\r\n  }\r\n  if (expList.length === 1 &&\r\n    Math.abs(expList[0].getValue() - target) < Number.EPSILON) {\r\n    answers.add(expList[0].toString());\r\n    return;\r\n  }\r\n\r\n  for (let i = 0; i < expList.length; i++) {\r\n    for (let j = i + 1; j < expList.length; j++) {\r\n      let x = expList[i];\r\n      let y = expList[j];\r\n      let remainList = [];\r\n\r\n      for (let k = 0; k < expList.length; k++) {\r\n        if (k !== i && k !== j) {\r\n          remainList.push(expList[k]);\r\n        }\r\n      }\r\n\r\n      if (operators.includes(PLUS)) {\r\n        let newExpList = arrayCopy(remainList);\r\n        newExpList.push(x.plus(y));\r\n        solve(newExpList);\r\n      }\r\n\r\n      if (operators.includes(MINUS)) {\r\n        let newExpList = arrayCopy(remainList);\r\n        newExpList.push(x.minus(y));\r\n        solve(newExpList);\r\n        if (x.getValue() !== y.getValue()) {\r\n          newExpList = arrayCopy(remainList);\r\n          newExpList.push(y.minus(x));\r\n          solve(newExpList);\r\n        }\r\n      }\r\n\r\n      if (operators.includes(TIMES)) {\r\n        let newExpList = arrayCopy(remainList);\r\n        newExpList.push(x.times(y));\r\n        solve(newExpList);\r\n      }\r\n\r\n      if (operators.includes(DIVIDES)) {\r\n        if (y.getValue() !== 0) {\r\n          let newExpList = arrayCopy(remainList);\r\n          newExpList.push(x.divides(y));\r\n          solve(newExpList);\r\n        }\r\n        if (x.getValue() !== 0 && x.getValue() !== y.getValue()) {\r\n          let newExpList = arrayCopy(remainList);\r\n          newExpList.push(y.divides(x));\r\n          solve(newExpList);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction printResults() {\r\n  // let result = null;\r\n  // for (let x of answers) {\r\n  //   console.log(x);\r\n  //   result += <p>{x}</p>;\r\n  // }\r\n  let answersArray = [...answers];\r\n  let result = answersArray.map((answer, index) => <p key={index}>{answer}</p>);\r\n  let size = answers.size;\r\n\r\n\r\n  if (size === 0) {\r\n    return { title: \"There are no answers\", solutions: null };\r\n  } else if (size === 1) {\r\n    return { title: \"There is one answer\", solutions: result };\r\n  } else {\r\n    return { title: `There are ${answers.size} answer`, solutions: result };\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @param {int} numOfSlots \r\n * @param {array of int} inputNums \r\n */\r\nfunction run(numOfSlots, inputNums, availableOperator, targetNum) {\r\n  operators = availableOperator;\r\n  target = targetNum;\r\n  let numbers = [];\r\n  answers.clear();\r\n  for (let i = 0; i < numOfSlots; i++) {\r\n    let value = parseInt(inputNums[i], 10);\r\n    numbers.push(value);\r\n  }\r\n\r\n  let expList = [];\r\n  for (let n of numbers) {\r\n    expList.push(new Expression(n));\r\n  }\r\n  solve(expList);\r\n  return printResults();\r\n}\r\n\r\nexport default run;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport BackButton from \"./common/BackButton\";\r\nimport GameSolver from \"./GameSolver\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Button from \"./common/Button\";\r\nimport Loader from 'react-loader-spinner';\r\nimport './SolvePage.css';\r\nimport SolveModeSettingMenu from \"./SolveModeSettingMenu\";\r\nimport { useWindowSize } from './common/useWindowSize.js';\r\nimport run from \"../game.jsx\";\r\nimport $ from \"jquery\";\r\n\r\nconst TIMES = \"×\";\r\nconst DIVIDES = \"÷\";\r\nconst PLUS = \"+\";\r\nconst MINUS = \"-\";\r\nlet operators = [TIMES, DIVIDES, PLUS, MINUS];\r\nconst defaultNumberCollection = [\r\n  { id: 1, value: \"empty\" },\r\n  { id: 2, value: \"empty\" },\r\n  { id: 3, value: \"empty\" },\r\n  { id: 4, value: \"empty\" },\r\n  { id: 5, value: \"empty\" },\r\n  { id: 6, value: \"empty\" },\r\n];\r\nlet solutions = null;\r\nlet title = null;\r\n\r\nconst SolvePage = (props) => {\r\n\r\n  const [bottomFadeoutDisplay, setBottomFadeoutDisplay] = useState(true);\r\n  const [topFadeoutDisplay, setTopFadeoutDisplay] = useState(false);\r\n  const [settingMenuOpen, setSettingMenuOpen] = useState(false);\r\n  const [targetNum, setTargetNum] = useState(24);\r\n  const [slotNum, setSlotNum] = useState(4);\r\n  const [numberCollection, setNumberCollection] = useState(defaultNumberCollection); //when the slot is not filled, its value is \"empty\", otherwise, it should be an int \r\n  const [availableOperator, setAvailableOperator] = useState(operators);\r\n  const [showAllAnswers, setShowAllAnswers] = useState(true);\r\n  const [loading, setLoading] = useState(false);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    $(\"#solution-scroll\").scroll(function () {\r\n      //document.getElementById('solution-scroll').scroll(function () {\r\n      if ($(\".solution-overflow\").height() + $(\".solution-overflow\").scrollTop() === document.getElementById('solution-scroll').scrollHeight) {\r\n        setBottomFadeoutDisplay(false);\r\n      } else {\r\n        setBottomFadeoutDisplay(true);\r\n      }\r\n      if ($(\".solution-overflow\").scrollTop() !== 0) {\r\n        setTopFadeoutDisplay(true);\r\n      } else {\r\n        setTopFadeoutDisplay(false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (screenWidth > 1200 && settingMenuOpen === true) {\r\n      setSettingMenuOpen(false);\r\n    }\r\n  });\r\n\r\n  let screenWidth = useWindowSize().width;\r\n\r\n  const calculate = () => {\r\n    let inputNums = [];\r\n    let filledSlotNum = 0;\r\n    let decimalNumExist = false;\r\n    for (let numSet of numberCollection) {\r\n      if (numSet.value !== \"empty\") {\r\n        inputNums.push(numSet.value);\r\n        filledSlotNum++;\r\n        if (!Number.isInteger(numSet.value)) {\r\n          decimalNumExist = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (filledSlotNum !== slotNum || decimalNumExist) { //if some slots are not filled\r\n      props.notifyError(`All the slots must be filled with INTEGER.`);\r\n    } else {\r\n      setLoading(true);\r\n\r\n      ({ title, solutions } = run(slotNum, inputNums, availableOperator, targetNum));\r\n      if (!showAllAnswers) {\r\n        solutions = solutions[0];\r\n      }\r\n      //after calculating\r\n      setLoading(false);\r\n      setModalOpen(true);\r\n    }\r\n  }\r\n\r\n\r\n  const switchSettingMenu = () => {\r\n    setSettingMenuOpen(!settingMenuOpen);\r\n  };\r\n\r\n  const backToDefaultSettings = () => {\r\n    setTargetNum(24);\r\n    setSlotNum(4);\r\n    setNumberCollection(defaultNumberCollection);\r\n    setAvailableOperator(operators);\r\n    setShowAllAnswers(true);\r\n  }\r\n\r\n  const filterArray = (arr, value) => {\r\n    return arr.filter((ele) => {\r\n      return ele !== value;\r\n    });\r\n  };\r\n\r\n\r\n  const handleAvailableOperatorCheckbox = (event) => {\r\n    let selectValue = event.target.value;\r\n    switch (selectValue) {\r\n      case TIMES:\r\n        operatorSwitch(TIMES);\r\n        break;\r\n      case DIVIDES:\r\n        operatorSwitch(DIVIDES);\r\n        break;\r\n      case PLUS:\r\n        operatorSwitch(PLUS);\r\n        break;\r\n      case MINUS:\r\n        operatorSwitch(MINUS);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const operatorSwitch = (ops) => {\r\n    if (availableOperator.includes(ops)) {\r\n      //the minimum number of operators is 2\r\n      if (availableOperator.length <= 2) {\r\n        props.notifyError(\"You must have at least two available operators\");\r\n        return;\r\n      }\r\n      setAvailableOperator(filterArray(\r\n        availableOperator,\r\n        ops\r\n      ));\r\n\r\n    } else {\r\n      let copy_availableOperator = [...availableOperator];\r\n      copy_availableOperator.push(ops);\r\n      setAvailableOperator(copy_availableOperator);\r\n    }\r\n  };\r\n\r\n\r\n  const handleSlotNumChange = (event) => {\r\n    setSlotNum(parseInt(event.target.value, 10));\r\n    setNumberCollection(defaultNumberCollection);\r\n  };\r\n\r\n  const handleTargetNumChange = (event) => {\r\n    setTargetNum(parseInt(event.target.value, 10));\r\n  }\r\n\r\n\r\n  const inputNumHandler = (event, index) => {\r\n    let numberCollectionCopy = [...numberCollection];\r\n    numberCollectionCopy[index - 1] = {\r\n      ...numberCollection[index - 1],\r\n    };\r\n    const numNewValue = event.target.value;\r\n    let floatInput = parseFloat(numNewValue, 10);\r\n    let intInput = parseInt(numNewValue, 10);\r\n    if (numNewValue === \"\") { //if the player empties the slot\r\n      numberCollectionCopy[index - 1].value = \"empty\";\r\n    } else {\r\n      numberCollectionCopy[index - 1].value = parseFloat(numNewValue, 10);\r\n    }\r\n    setNumberCollection(numberCollectionCopy);\r\n  };\r\n\r\n  const closeSolutionModal = () => {\r\n    setModalOpen(false);\r\n    setNumberCollection(defaultNumberCollection);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid h-100\">\r\n        <div className={modalOpen === true ? \"result-modal\" : \"d-none\"}>\r\n          <div className={bottomFadeoutDisplay === true ? \"result-modal-body-with-fadeout\" : \"result-modal-body\"}>\r\n            <a id=\"delete-cross\" onClick={closeSolutionModal}><span className=\"result-modal-delete\">&times;</span></a>\r\n            <div style={{ clear: \"both\" }}></div>\r\n            <h2 id={topFadeoutDisplay === true ? \"solution-top-text-with-fadeout\" : \"solution-top-text\"} className=\"fnt-bold\" style={{ marginBottom: \"-2rem\", marginTop: \"3rem\" }}>{title}{showAllAnswers === true ? null : \" (only one is shown)\"}</h2>\r\n            <div id=\"solution-scroll\" className=\"solution-overflow\">\r\n              {solutions}\r\n              {/* <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p>\r\n              <p className=\"solution\">12+12+12+12</p> */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={settingMenuOpen === false ? \"row h-100\" : \"row h-100 grey-content\"}>\r\n          {/* A fixed width column */}\r\n          <div className=\"menu-sidebar-hostpage\">\r\n            <div id=\"menu-sidebar-top\" style={{ clear: \"both\" }}>\r\n              <div className=\"float-left\">\r\n                <BackButton\r\n                  handleBack={props.handleBack}\r\n                  prevPage=\"homePage\"\r\n                ></BackButton>\r\n              </div>\r\n              <div className=\"float-right\">\r\n                <a\r\n                  id=\"menu-switch\"\r\n                  onClick={switchSettingMenu}\r\n                >\r\n                  {settingMenuOpen === false ?\r\n                    <FontAwesomeIcon icon={faBars} size=\"2x\" /> :\r\n                    <FontAwesomeIcon icon={faTimes} size=\"2x\" />}\r\n                </a>\r\n              </div>\r\n            </div>\r\n            <div className={settingMenuOpen === false ? \"display-none\" : \"grey-content\"}>\r\n              <SolveModeSettingMenu\r\n                slotNum={slotNum}\r\n                targetNum={targetNum}\r\n                availableOperator={availableOperator}\r\n                showAllAnswers={showAllAnswers}\r\n                handleTargetNumChange={handleTargetNumChange}\r\n                handleSlotNumChange={handleSlotNumChange}\r\n                handleAvailableOperatorCheckbox={handleAvailableOperatorCheckbox}\r\n                handleShowAllAnswers={() => setShowAllAnswers(!showAllAnswers)}\r\n                backToDefaultSettings={backToDefaultSettings} />\r\n            </div>\r\n          </div>\r\n          <div className={settingMenuOpen === false ? \"col text-center\" : \"display-none\"}>\r\n            <div id=\"solvePage-mainContent\" className=\"d-flex flex-column align-items-center\">\r\n              <div className=\"d-flex flex-wrap\" style={{ marginBottom: \"4rem\", width: \"90%\", maxWidth: \"50rem\" }}>\r\n                <GameSolver\r\n                  numberCollection={numberCollection}\r\n                  slotNum={slotNum}\r\n                  inputNumHandler={inputNumHandler}\r\n                />\r\n              </div>\r\n              <Button\r\n                onClick={calculate}\r\n                disabled={loading}\r\n                style={0}\r\n                display={loading === true ?\r\n                  <div className=\"force-inline\">\r\n                    <Loader\r\n                      type=\"TailSpin\"\r\n                      color=\"#00BFFF\"\r\n                      height={20}\r\n                      width={20}\r\n                    />\r\n                  </div> :\r\n                  \"Calculate\"}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div >\r\n\r\n\r\n    </React.Fragment>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default SolvePage;","import React from \"react\";\r\nimport \"./NameInputUI.css\";\r\n\r\n/**\r\n *  The UI to let the player enters their names\r\n *  placeHolder: the placeHolder text\r\n *  onChange: the onChange event\r\n */\r\nconst NameInputUI = ({ placeHolder, onChange }) => {\r\n  function formPreventDefault(e) {\r\n    e.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={formPreventDefault} id=\"name-form\" className=\"form-inline justify-content-center\" >\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control fnt-regular\"\r\n          id=\"input-name\"\r\n          placeholder={placeHolder}\r\n          maxLength=\"15\"\r\n          onChange={(event) => onChange(event)}\r\n          autoFocus\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NameInputUI;\r\n","import React from \"react\";\r\nimport BackButton from \"./common/BackButton\";\r\nimport NameInputUI from \"./common/NameInputUI\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport Button from './common/Button';\r\nimport './SelectPage.css';\r\n\r\nconst SelectPage = (props) => {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <div className=\"container-fluid h-100\">\r\n      <div className=\"row\" style={{ height: \"10%\" }}>\r\n        <div className=\"col my-auto\">\r\n          <BackButton\r\n            handleBack={props.handleBack}\r\n            prevPage=\"homePage\"\r\n          ></BackButton>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"row\" style={{ height: \"90%\" }}>\r\n        <div className=\"col text-center\">\r\n          <h1 id=\"title-selectpage\" className=\"fnt-bold\">\r\n            {t('Create or join a room')}\r\n          </h1>\r\n\r\n          <h3 id=\"text-selectpage\" className=\"fnt-medium\">\r\n            Please enter a nickname\r\n          </h3>\r\n\r\n          <div id=\"input-selectpage\">\r\n            <NameInputUI\r\n              onChange={props.setStateName}\r\n              placeHolder=\"No more than 15 characters\"\r\n            />\r\n          </div>\r\n\r\n          <div id=\"btn-selectpage-left\" className=\"force-inline fnt-medium\">\r\n            <Button\r\n              onClick={props.pressCreateRoomButton}\r\n              display={\"Create\"}\r\n              style={0}\r\n            />\r\n          </div>\r\n\r\n          <div id=\"btn-selectpage-right\" className=\"force-inline fnt-medium\">\r\n            <Button\r\n              onClick={props.pressJoinRoomButton}\r\n              display={\"Join\"}\r\n              style={0}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SelectPage;\r\n","import React from 'react';\r\n\r\n/**\r\n * \r\n * used in the setting for the range of number input\r\n */\r\nconst RangeNumberInput = ({ id, onChange, value, placeholder }) => {\r\n  return (\r\n    <input\r\n      className=\"form-control d-inline-block\"\r\n      style={{ width: \"42%\" }}\r\n      type=\"number\"\r\n      id={id}\r\n      onChange={onChange}\r\n      value={value}\r\n      placeholder={placeholder}\r\n    ></input>\r\n  );\r\n}\r\n\r\nexport default RangeNumberInput;","import React from 'react';\r\n// import \"../../index.css\";\r\n\r\n\r\nconst MenuExpand = ({ onClick, text }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <a\r\n        className=\"d-block no-underline\"\r\n        data-toggle=\"collapse\"\r\n        href=\"#collapseAdvanced\"\r\n        onClick={onClick}\r\n      >\r\n        <span className=\"fnt-bold\">{text}</span>\r\n      </a>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default MenuExpand;","import React, { useState } from \"react\";\r\n\r\nimport \"./MenuSetting.css\";\r\nimport Slider from \"./common/Slider\";\r\nimport OperatorSettingButton from \"./common/OperatorSettingButton\";\r\nimport RangeNumberInput from \"./common/RangeNumberInput\";\r\nimport MenuExpand from \"./common/MenuExpand\";\r\nimport SettingWrapper from \"./common/SettingWrapper\";\r\nimport Button from \"./common/Button\";\r\nconst TIMES = \"×\";\r\nconst DIVIDES = \"÷\";\r\nconst PLUS = \"+\";\r\nconst MINUS = \"-\";\r\n\r\nconst MenuSetting = (props) => {\r\n  // let showMenuBooleanStyle = props.showMenuBoolean === false ? \"none\" : \"block\";\r\n  // let display = { display: showMenuBooleanStyle };\r\n  const [menuExpanded, setMenuExpanded] = useState(false);\r\n  const adjustMenu = () => {\r\n    if (menuExpanded === false) {\r\n      setMenuExpanded(true);\r\n    } else {\r\n      setMenuExpanded(false);\r\n    }\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      {/*Basic part of the setting menu */}\r\n      <div style={{ marginTop: \"5rem\" }}>\r\n        <SettingWrapper>\r\n          <Slider\r\n            min=\"12\"\r\n            max=\"36\"\r\n            value={props.targetNum}\r\n            id=\"targetNum\"\r\n            onChange={props.handleTargetNumChange}\r\n            labelText=\"Target Number\"\r\n            labelData={props.targetNum}\r\n          />\r\n        </SettingWrapper>\r\n      </div>\r\n      <SettingWrapper>\r\n        <Slider\r\n          min=\"2\"\r\n          max=\"6\"\r\n          value={props.slotNum}\r\n          id=\"slots\"\r\n          onChange={props.handleSlotNumChange}\r\n          labelText=\"Number of slots\"\r\n          labelData={props.slotNum}\r\n        />\r\n      </SettingWrapper>\r\n      {/*Advanced part of the setting menu */}\r\n\r\n      <div\r\n        id=\"collapseAdvanced\"\r\n        className=\"collapse\"\r\n      >\r\n        {/*Checkbox for available operators */}\r\n        <SettingWrapper>\r\n          <span className=\"fnt-bold grey-text\">Available operators<br /></span>\r\n\r\n          <OperatorSettingButton\r\n            id=\"checkAdd\"\r\n            value={PLUS}\r\n            onChange={props.handleAvailableOperatorCheckbox}\r\n            checked={props.availableOperator.includes(PLUS)}\r\n            img={{ src: \"addSign.png\", alt: \"add\" }}\r\n          />\r\n\r\n          <OperatorSettingButton\r\n            id=\"checkSubtract\"\r\n            value={MINUS}\r\n            onChange={props.handleAvailableOperatorCheckbox}\r\n            checked={props.availableOperator.includes(MINUS)}\r\n            img={{ src: \"subtractSign.png\", alt: \"subtract\" }}\r\n          />\r\n\r\n          <OperatorSettingButton\r\n            id=\"checkMultiply\"\r\n            value={TIMES}\r\n            onChange={props.handleAvailableOperatorCheckbox}\r\n            checked={props.availableOperator.includes(TIMES)}\r\n            img={{ src: \"multiplySign.png\", alt: \"multiply\" }}\r\n          />\r\n\r\n          <OperatorSettingButton\r\n            id=\"checkDivide\"\r\n            value={DIVIDES}\r\n            onChange={props.handleAvailableOperatorCheckbox}\r\n            checked={props.availableOperator.includes(DIVIDES)}\r\n            img={{ src: \"divideSign.png\", alt: \"divide\" }}\r\n          />\r\n\r\n        </SettingWrapper>\r\n        {/*This row is the range of available number */}\r\n        <SettingWrapper>\r\n          <p className=\"fnt-bold grey-text\">Range of available numbers</p>\r\n          <RangeNumberInput\r\n            id=\"lower-bound\"\r\n            onChange={props.handleRangeOfAvailableNumberLowBoundInput}\r\n            value={props.rangeOfAvailableNumberLowBound}\r\n            placeholder=\"Lower Bound\"\r\n          />\r\n          <span className=\"d-inline-block text-center\" style={{ width: \"16%\" }}>\r\n            to\r\n            </span>\r\n          <RangeNumberInput\r\n            id=\"higher-bound\"\r\n            onChange={props.handleRangeOfAvailableNumberHighBoundInput}\r\n            value={props.rangeOfAvailableNumberHighBound}\r\n            placeholder=\"Upper Bound\"\r\n          />\r\n        </SettingWrapper>\r\n        {/*Maximum number of repeats */}\r\n        <SettingWrapper>\r\n          <Slider\r\n            min=\"1\"\r\n            max=\"4\"\r\n            value={props.maxRepeatNum}\r\n            id=\"maxRepeatNum\"\r\n            onChange={props.handleMaxRepeatNumInput}\r\n            labelText=\"Maximum number of repeats\"\r\n            labelData={props.maxRepeatNum}\r\n          />\r\n        </SettingWrapper>\r\n        {/*Round breaks */}\r\n        <SettingWrapper>\r\n\r\n          <Slider\r\n            min=\"20\"\r\n            max=\"120\"\r\n            value={props.roundDuration}\r\n            id=\"roundDuration\"\r\n            onChange={props.handleRoundDurationInput}\r\n            labelText=\"Round duration\"\r\n            labelData={props.roundDuration + \" seconds\"}\r\n          />\r\n\r\n        </SettingWrapper>\r\n        {/*Number of rounds */}\r\n        <SettingWrapper>\r\n          <Slider\r\n            min=\"10\"\r\n            max=\"20\"\r\n            value={props.numOfRound}\r\n            id=\"roundNum\"\r\n            onChange={props.handleNumOfRoundInput}\r\n            labelText=\"Number of rounds\"\r\n            labelData={props.numOfRound}\r\n          />\r\n        </SettingWrapper>\r\n      </div>\r\n      <SettingWrapper>\r\n        <MenuExpand\r\n          onClick={adjustMenu}\r\n          text={menuExpanded === true ? \"Hide\" : \"Advanced\"}\r\n        />\r\n      </SettingWrapper>\r\n      {/* <button\r\n         className=\"btn btn-primary btn-lg mt-2\"\r\n         onClick={props.pressMenuCloseButton}\r\n   >\r\n         <img style={{ width: \"100px\" }} src=\"multiplySign.png\"></img>\r\n       </button> */}\r\n      <div id=\"default-button\" className=\"row justify-content-center\" style={{ marginBottom: \"2rem\" }}>\r\n        {/* <div id=\"default-button\"> */}\r\n        <Button\r\n          onClick={props.backToDefaultSettings}\r\n          display=\"Default\"\r\n          style={1}\r\n        />\r\n      </div>\r\n\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MenuSetting;","import React from \"react\";\r\nimport \"./ExitRoomButton.css\";\r\n\r\nconst ExitRoomButton = (props) => {\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <button\r\n        className=\"btn btn-back\"\r\n        onClick={() => {\r\n          props.onCancel();\r\n        }}\r\n      >\r\n        <svg height=\"0.8rem\" viewBox=\"0 0 16 16\" className=\"btn-back-svg force-inline bi bi-chevron-left\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path fillRule=\"evenodd\" stroke=\"#707070\" strokeWidth=\"0.2rem\" d=\"M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\" />\r\n        </svg>\r\n        <div className=\"force-inline fnt-bold btn-back-text\">\r\n          Exit\r\n        </div>\r\n      </button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ExitRoomButton;\r\n","import React from \"react\";\r\nimport \"./Roster.css\";\r\nimport { HOSTPAGE, WAITFORHOSTPAGE, MULTIGAMEPAGE } from './roomConst';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n/**\r\n * \r\n * Display the current players in the room\r\n * If the player is in the waitForHostPage, only display the name\r\n * If the player is in the multiPlayerGamePage, display the name and whether or not \r\n * each player has solved the problem in the current round plus the emoji functionality\r\n */\r\nconst Roster = ({ playerRoster, playerSolved, pageController, playerColor }) => {\r\n  let rosterVersion = \"\";\r\n  if (pageController === HOSTPAGE || pageController === WAITFORHOSTPAGE) {\r\n    rosterVersion = \"bigVersion\";\r\n  } else {\r\n    rosterVersion = \"smallVersion\";\r\n  }\r\n  const solvedOrNot = (eachName) => {\r\n    //only shows whether or not a player has solved the problem in the MULTIGAMEPAGE\r\n    if (pageController === HOSTPAGE || pageController === WAITFORHOSTPAGE) {\r\n      return null;\r\n    }\r\n    let display = playerSolved.includes(eachName) === true ?\r\n      <span id=\"check-green\"><FontAwesomeIcon icon={faCheckCircle} size=\"1x\" /></span> :\r\n      <span id=\"times-red\"><FontAwesomeIcon icon={faTimesCircle} size=\"1x\" /></span>;\r\n    return display;\r\n  };\r\n\r\n  // const randomColor = () => {\r\n  //   const color = Math.floor(Math.random() * 16777215).toString(16);\r\n  //   return '#' + color;\r\n  // };\r\n\r\n  return (\r\n\r\n    <div className=\"d-flex flex-wrap\">\r\n      {playerRoster.map((eachName, index) => {\r\n        return (\r\n          <div className={rosterVersion === \"bigVersion\" ? \"centerize\" : \"centerize-small\"} key={index}>\r\n            <div id=\"solve-check\">{solvedOrNot(eachName)}</div>\r\n            <div className={rosterVersion === \"bigVersion\" ? \"circle\" : \"circle-small\"} style={{ backgroundColor: playerColor[eachName] }}>\r\n              <div className={rosterVersion === \"bigVersion\" ? \"name\" : \"name-small\"}>{eachName[0]}</div>\r\n            </div>\r\n            <div id={rosterVersion === \"bigVersion\" ? \"player-name\" : \"player-name-small\"}>{eachName}</div>\r\n          </div>);\r\n      })}\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Roster;\r\n","export const HOMEPAGE = \"homePage\"; //1\r\nexport const SOLVEPAGE = \"solvePage\"; //2\r\nexport const SELECTPAGE = \"gamePage\"; //3\r\nexport const HOSTPAGE = \"createRoomPage\"; //4\r\nexport const JOINROOMPAGE = \"joinRoomNumPage\"; //5\r\nexport const WAITFORHOSTPAGE = \"waitForHostPage\"; //6\r\nexport const MULTIGAMEPAGE = \"multiPlayerGamePage\"; //7\r\nexport const SINGLEGAMEPAGE = \"singlePlayerGamePage\"; //8\r\nexport const LOADINGPAGE = \"gameLoadingPage\"; //9\r\nexport const COUNTDOWNPAGE = \"preGameCountDownPage\"; //10\r\nexport const BTWROUNDPAGE = \"betweenRoundPage\"; //11\r\nexport const SUMMARYPAGE = \"summaryPage\"; //12","import React from 'react';\r\nimport Roster from './Roster.jsx';\r\nimport \"./RoomInfo.css\"\r\n\r\nconst RoonInfo = (props) => {\r\n  return (\r\n    <div id=\"rightside-hostpage\" className=\"d-flex flex-column align-items-center \">\r\n      <h3 className=\"fnt-bold grey-text\" style={{ marginTop: \"3rem\" }}>\r\n        Room number\r\n      </h3>\r\n      <h1 id=\"room-number-text\" className=\"fnt-thin\">\r\n        {props.roomNumber}\r\n      </h1>\r\n      {/* <h1 id=\"room-number-text\" className=\"fnt-thin\">\r\n        1234\r\n      </h1> */}\r\n\r\n      <h3 className=\"fnt-bold grey-text\" style={{ marginTop: \"2rem\" }}>\r\n        Players\r\n      </h3>\r\n\r\n      <h1 id=\"room-number-text\" className=\"fnt-thin\" style={{ fontSize: \"1rem\" }}>\r\n        {props.playerRoster.length} of {props.maxPlayerNum}\r\n      </h1>\r\n\r\n      <h3 id=\"wait-text\">\r\n        Waiting for other players to join...\r\n      </h3>\r\n\r\n      <Roster\r\n        //playerRoster={['Xin', 'Du', 'Gong', 'Zheng', 'zhe', 'Wuhan', 'Hua', 'Kao', 'a', 'b', 'c', 'd', 'e', 'f']}\r\n        playerRoster={props.playerRoster}\r\n        playerSolved={props.playerSolved}\r\n        pageController={props.pageController}\r\n        // playerColor={{\r\n        //   Xin: \"#123456\", Du: \"#123456\", Gong: \"#123456\", Zheng: \"#123456\", zhe: \"#123456\", Wuhan: \"#123456\", Hua: \"#123456\", Kao: \"#123456\",\r\n        //   a: \"#123456\", b: \"#123456\", c: \"#123456\", d: \"#123456\", e: \"#123456\", f: \"#123456\"\r\n        // }}\r\n        playerColor={props.playerColor}\r\n      ></Roster>\r\n      {/* <Roster\r\n          playerRoster={props.playerRoster}\r\n          playerSolved={props.playerSolved}\r\n          pageController={props.pageController}\r\n          playerColor={props.playerColor}\r\n        ></Roster> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RoonInfo;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport MenuSetting from \"./MenuSetting\";\r\nimport ExitRoomButton from \"./common/ExitRoomButton\";\r\nimport Roster from \"./Roster\";\r\nimport Loader from 'react-loader-spinner';\r\nimport { HOSTPAGE } from './roomConst';\r\nimport Button from \"./common/Button\";\r\nimport './HostPage.css';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useWindowSize } from './common/useWindowSize.js';\r\nimport RoomInfo from './RoomInfo';\r\nconst HostPage = (props) => {\r\n  let screenWidth = useWindowSize().width;\r\n\r\n  useEffect(() => {\r\n    props.startCountDown();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (screenWidth > 1200 && props.gameModeSettingMenuOpen === true) {\r\n      props.setGameModeSettingMenuOpenFalse();\r\n    }\r\n  });\r\n\r\n  const autoStartReminder = () => {\r\n    let text = \"\";\r\n\r\n    if (props.waitTimeMax === 0) {\r\n      text = <span>Loading the game...</span>\r\n    } else if (props.waitTimeMax <= 60) {\r\n      text = <span>The game will begin automatically in {props.waitTimeMax} seconds</span>\r\n    }\r\n    return text;\r\n  };\r\n  return (\r\n    <div className=\"container-fluid h-100\">\r\n      <div className={props.gameModeSettingMenuOpen === false ? \"row h-100\" : \"row h-100 grey-content\"}>\r\n        {/* A fixed width column */}\r\n        <div className=\"menu-sidebar-hostpage\">\r\n          <div id=\"menu-sidebar-top\" style={{ clear: \"both\" }}>\r\n            <div className=\"float-left\">\r\n              <ExitRoomButton\r\n                onCancel={props.exitRoomButtonPress}\r\n              ></ExitRoomButton>\r\n            </div>\r\n            <div className=\"float-right\">\r\n              <a\r\n                id=\"menu-switch\"\r\n                onClick={props.switchSettingsMenu}\r\n              >\r\n                {props.gameModeSettingMenuOpen === false ?\r\n                  <FontAwesomeIcon icon={faBars} size=\"2x\" /> :\r\n                  <FontAwesomeIcon icon={faTimes} size=\"2x\" />}\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <div className={props.gameModeSettingMenuOpen === false ? \"display-none\" : \"grey-content\"}>\r\n            <MenuSetting\r\n              handleSlotNumChange={props.handleSlotNumChange}\r\n              handleTargetNumChange={props.handleTargetNumChange}\r\n              pressMenuCloseButton={props.pressMenuCloseButton}\r\n              handleRangeOfAvailableNumberLowBoundInput={\r\n                props.handleRangeOfAvailableNumberLowBoundInput\r\n              }\r\n              handleRangeOfAvailableNumberHighBoundInput={\r\n                props.handleRangeOfAvailableNumberHighBoundInput\r\n              }\r\n              handleMaxRepeatNumInput={props.handleMaxRepeatNumInput}\r\n              handleRoundDurationInput={props.handleRoundDurationInput}\r\n              handleNumOfRoundInput={props.handleNumOfRoundInput}\r\n              handleAvailableOperatorCheckbox={\r\n                props.handleAvailableOperatorCheckbox\r\n              }\r\n              backToDefaultSettings={props.backToDefaultSettings}\r\n              slotNum={props.slotNum}\r\n              targetNum={props.targetNum}\r\n              showMenuBoolean={props.gameModeSettingMenuOpen}\r\n              rangeOfAvailableNumberLowBound={\r\n                props.rangeOfAvailableNumberLowBound\r\n              }\r\n              rangeOfAvailableNumberHighBound={\r\n                props.rangeOfAvailableNumberHighBound\r\n              }\r\n              maxRepeatNum={props.maxRepeatNum}\r\n              roundDuration={props.roundDuration}\r\n              numOfRound={props.numOfRound}\r\n              availableOperator={props.availableOperator}\r\n            ></MenuSetting>\r\n          </div>\r\n        </div>\r\n        <div className={props.gameModeSettingMenuOpen === false ? \"col text-center\" : \"display-none\"}>\r\n          <h1 className=\"fnt-bold grey-text\" style={{ marginTop: \"5rem\" }}>\r\n            Start the game\r\n          </h1>\r\n          <RoomInfo\r\n            playerRoster={props.playerRoster}\r\n            playerSolved={props.playerSolved}\r\n            maxPlayerNum={props.maxPlayerNum}\r\n            roomNumber={props.roomNumber}\r\n            pageController={props.pageController}\r\n            playerColor={props.playerColor}\r\n          />\r\n          <div>\r\n            <h3 className=\"fnt-bold\" style={{ marginBottom: \"2rem\" }}>\r\n              {autoStartReminder()}\r\n            </h3>\r\n            <div style={{ marginBottom: \"2rem\" }}>\r\n              <Button\r\n                onClick={props.pressStartGameButton}\r\n                disabled={props.startGameButtonDisabled}\r\n                style={0}\r\n                display={props.loading === true ?\r\n                  <div className=\"force-inline\">\r\n                    <Loader\r\n                      type=\"TailSpin\"\r\n                      color=\"#00BFFF\"\r\n                      height={20}\r\n                      width={20}\r\n                    />\r\n                  </div> :\r\n                  \"Start\"}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default HostPage;\r\n","import React, { Component } from \"react\";\r\nimport \"./RoomNumInput.css\";\r\nimport $ from \"jquery\";\r\n\r\n// Key codes\r\nconst DIGIT_ZERO = 48;\r\nconst DIGIT_NINE = 57;\r\nconst NUMPAD_ZERO = 96;\r\nconst NUMPAD_NINE = 105;\r\nconst BACKSPACE = 8;\r\n\r\n\r\nclass RoomNumInput extends Component {\r\n  componentDidMount = () => {\r\n    $(\".inputs\").keydown(function (e) {\r\n      if (e.keyCode === BACKSPACE && this.value.length === 0) {\r\n        $(this).closest(\"div\").prev(\"div\").children('.inputs').select();\r\n      }\r\n    }).keyup(function (e) {\r\n      if (((e.keyCode >= DIGIT_ZERO && e.keyCode <= DIGIT_NINE) ||\r\n        (e.keyCode >= NUMPAD_ZERO && e.keyCode <= NUMPAD_NINE)) &&\r\n        this.value.length === this.maxLength) {\r\n        $(this).closest(\"div\").next(\"div\").children('.inputs').select();\r\n      }\r\n      // Extra safty measure, adapted from https://stackoverflow.com/a/39292545\r\n      $(this).val($(this).val().replace(/[^0-9]/g, ''));\r\n    }).click(function () {\r\n      $(this).select();\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"force-inline fnt-thin\">\r\n          <input className=\"input-roomNum form-control inputs\" type=\"Number\" maxLength=\"1\" id=\"first\" onChange={this.props.setRoomNum} autoFocus />\r\n        </div>\r\n        <div className=\"force-inline fnt-thin\">\r\n          <input className=\"input-roomNum form-control inputs\" type=\"Number\" maxLength=\"1\" id=\"second\" onChange={this.props.setRoomNum} />\r\n        </div>\r\n        <div className=\"force-inline fnt-thin\">\r\n          <input className=\"input-roomNum form-control inputs\" type=\"Number\" maxLength=\"1\" id=\"third\" onChange={this.props.setRoomNum} />\r\n        </div>\r\n        <div className=\"force-inline fnt-thin\">\r\n          <input className=\"input-roomNum form-control inputs\" type=\"Number\" maxLength=\"1\" id=\"last\" onChange={this.props.setRoomNum} />\r\n        </div>\r\n      </React.Fragment >\r\n    );\r\n  }\r\n};\r\n\r\nexport default RoomNumInput;\r\n","import React from \"react\";\r\nimport ExitRoomButton from \"./common/ExitRoomButton\";\r\nimport RoomNumInput from \"./RoomNumInput\";\r\nimport NameInputUI from \"./common/NameInputUI\";\r\nimport Button from \"./common/Button\";\r\nimport BackButton from \"./common/BackButton\";\r\nimport './JoinRoomPage.css';\r\n\r\nconst JoinRoomPage = (props) => {\r\n  return (\r\n    <div className=\"container-fluid h-100\">\r\n      <div className=\"row\" style={{ height: \"10%\" }}>\r\n        <div className=\"col my-auto\">\r\n          <BackButton\r\n            handleBack={props.handleBack}\r\n            prevPage=\"gamePage\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row\" style={{ height: \"90%\" }}>\r\n        <div className=\"col text-center\">\r\n          <h1 id=\"title-joinroompage\" className=\"fnt-bold\">\r\n            Join A Room\r\n          </h1>\r\n\r\n          <h3 className=\"subtitle-joinroompage fnt-medium\">\r\n            Your nickname\r\n          </h3>\r\n\r\n          <div className=\"input-joinroompage\">\r\n            <NameInputUI\r\n              placeHolder={props.username}\r\n              onChange={props.setStateName}\r\n            />\r\n          </div>\r\n\r\n          <h3 className=\"subtitle-joinroompage fnt-medium\">\r\n            Room number\r\n          </h3>\r\n\r\n          <div className=\"input-joinroompage\">\r\n            <RoomNumInput\r\n              setRoomNum={props.setRoomNum}\r\n              roomNumber={props.roomNumber}\r\n            ></RoomNumInput>\r\n          </div>\r\n\r\n          <div className=\"fnt-medium\">\r\n            <Button\r\n              onClick={props.pressJoinRoomKeyButton}\r\n              display={\"Join\"}\r\n              style={0}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JoinRoomPage;\r\n","import React from \"react\";\r\nimport Roster from \"./Roster\";\r\nimport ExitRoomButton from \"./common/ExitRoomButton.jsx\";\r\nimport RoomInfo from \"./RoomInfo.jsx\";\r\n\r\nconst WaitForHostPage = (props) => {\r\n  return (\r\n    <div className=\"container-fluid h-100\">\r\n      <div className=\"row\" style={{ height: \"10%\" }}>\r\n        <div className=\"col my-auto\">\r\n          <ExitRoomButton\r\n            onCancel={props.exitRoomButtonPress}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row\" style={{ height: \"90%\" }}>\r\n        <div className=\"col text-center\">\r\n          <h1 className=\"fnt-bold grey-text\" style={{ marginTop: \"5rem\" }}>\r\n            Waiting for the game to start\r\n          </h1>\r\n\r\n          <RoomInfo\r\n            playerRoster={props.playerRoster}\r\n            playerSolved={props.playerSolved}\r\n            maxPlayerNum={props.maxPlayerNum}\r\n            roomNumber={props.roomNumber}\r\n            pageController={props.pageController}\r\n            playerColor={props.playerColor}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WaitForHostPage;\r\n","import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBackspace } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n/**\r\n * The place where the game UI exists\r\n */\r\nclass GameBoard extends Component {\r\n  state = {\r\n    submitButtonRest: false\r\n  };\r\n\r\n  disableSubmitButtonTemp = () => {\r\n    this.setState({ submitButtonRest: true });\r\n    setTimeout(() => this.setState({ submitButtonRest: false }), 2000);\r\n  }\r\n\r\n  answerCorrectText = () => {\r\n    if (this.props.answerCorrect === true) {\r\n      return <p>{this.props.answer} is Correct! Congrats.</p>;\r\n    } else if (this.props.answerCorrect === false) {\r\n      return <p>{this.props.answer} is Incorrect! You have {this.props.attemptNum} attemps left.</p>;\r\n    }\r\n    return null; //in the case of undefined\r\n  }\r\n\r\n  findOperatorImage = (ope) => {\r\n    if (ope === '×') {\r\n      return <img src='multiplySign.png' alt='time' />;\r\n    } else if (ope === '-') {\r\n      return <img src='subtractSign.png' alt='subtract' />;\r\n    } else if (ope === '+') {\r\n      return <img src='addSign.png' alt='add' />;\r\n    } else if (ope === '÷') {\r\n      return <img src='divideSign.png' alt='divide' />;\r\n    } else if (ope === '(') {\r\n      return <span className=\"grey-text parans\">(</span>;\r\n      // return <img src='divideSign.png' alt='leftParan' />;\r\n    } else if (ope === ')') {\r\n      return <span className=\"grey-text parans\">)</span>;\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    let displayExpression = \"\";\r\n    //Add space between each char\r\n    this.props.expressionInput.map((num) => {\r\n      displayExpression += num + \" \";\r\n      return num;\r\n    });\r\n\r\n    let numberLength = this.props.gameNumbers.length;\r\n\r\n    //add two parentheses to the available operator list\r\n    let final_operators = [...this.props.operators];\r\n    let leftRightParans = ['(', ')'];\r\n\r\n    let resultText = `You have ${this.props.attemptNum} attemps left`;\r\n\r\n    let numberBtns = null;\r\n    if (this.props.screenWidth > 1200) {\r\n      numberBtns = <div className=\"d-flex flex-row flex-wrap justify-content-around w-100 number-margin-top phone-max-width-number\" style={{ maxWidth: \"1150px\" }}>\r\n        {this.props.gameNumbers.map((eachNum, index) => {\r\n          return (<div key={index}>\r\n            <button\r\n              className=\"btn btn-round-blue\"\r\n              onClick={() => {\r\n                this.props.addNumToInput(eachNum, index);\r\n              }}\r\n              disabled={this.props.multiplayerButtonDisable[index] || this.props.submitButtonDisable || this.props.attemptNum === 0}>\r\n              <span>{eachNum}</span>\r\n            </button>\r\n          </div>);\r\n        })}\r\n      </div>;\r\n    } else {\r\n      numberBtns = <div className={\"d-flex flex-row flex-wrap justify-content-around w-100 number-margin-top \" + (numberLength === 4 ? \"phone-max-width-number-4-version\" : \"phone-max-width-number\")} style={{ maxWidth: \"1150px\" }}>\r\n        {this.props.gameNumbers.map((eachNum, index) => {\r\n          return (<React.Fragment><div key={index}>\r\n            <button\r\n              className=\"btn btn-round-blue\"\r\n              onClick={() => {\r\n                this.props.addNumToInput(eachNum, index);\r\n              }}\r\n              disabled={this.props.multiplayerButtonDisable[index] || this.props.submitButtonDisable || this.props.attemptNum === 0}>\r\n              <span>{eachNum}</span>\r\n            </button>\r\n          </div>\r\n            {(index === 2 && (numberLength === 6 || numberLength === 5)) ? <div className=\"break\"></div> : null}</React.Fragment>);\r\n        })}\r\n      </div>;\r\n    }\r\n\r\n    let operateBtns = null;\r\n    if (this.props.screenWidth > 1200) {\r\n      operateBtns = <div className=\"d-flex flex-wrap flex-row justify-content-around w-100 operator-margin-top phone-max-width-operator\" style={{ maxWidth: \"1150px\" }}>\r\n        {final_operators.map((eachOpe, index) => {\r\n          return (<div key={index}>\r\n            <button\r\n              className=\"btn btn-operator fnt-medium\"\r\n              onClick={() => {\r\n                this.props.addNumToInput(eachOpe);\r\n              }}\r\n              disabled={this.props.submitButtonDisable || this.props.attemptNum === 0}\r\n            >{this.findOperatorImage(eachOpe)}</button>\r\n          </div>);\r\n        })}\r\n        {/* <div className=\"break\"></div> */}\r\n        {leftRightParans.map((eachOpe, index) => {\r\n          return (<div key={index}>\r\n            <button\r\n              className=\"btn btn-operator fnt-medium\"\r\n              onClick={() => {\r\n                this.props.addNumToInput(eachOpe);\r\n              }}\r\n              disabled={this.props.submitButtonDisable || this.props.attemptNum === 0}\r\n            >{this.findOperatorImage(eachOpe)}</button>\r\n          </div>);\r\n        })}\r\n        <button\r\n          className=\"btn btn-round-red\"\r\n          onClick={this.props.pressNoSolutionButton}\r\n          disabled={this.props.submitButtonDisable || this.props.attemptNum === 0}\r\n        >No Solution</button>\r\n      </div>;\r\n    } else {\r\n      operateBtns = <div className=\"d-flex flex-row flex-wrap justify-content-around w-100 operator-margin-top phone-max-width-operator\" style={{ maxWidth: \"1150px\" }}>\r\n        {final_operators.map((eachOpe, index) => {\r\n          return (<div key={index}>\r\n            <button\r\n              className=\"btn btn-operator fnt-medium\"\r\n              onClick={() => {\r\n                this.props.addNumToInput(eachOpe);\r\n              }}\r\n              disabled={this.props.submitButtonDisable || this.props.attemptNum === 0}\r\n            >{this.findOperatorImage(eachOpe)}</button>\r\n          </div>);\r\n        })}\r\n        <div className=\"break\"></div>\r\n        {leftRightParans.map((eachOpe, index) => {\r\n          return (<div key={index}>\r\n            <button\r\n              className=\"btn btn-operator fnt-medium\"\r\n              onClick={() => {\r\n                this.props.addNumToInput(eachOpe);\r\n              }}\r\n              disabled={this.props.submitButtonDisable || this.props.attemptNum === 0}\r\n            >{this.findOperatorImage(eachOpe)}</button>\r\n          </div>);\r\n        })}\r\n        <button\r\n          className=\"btn btn-round-red\"\r\n          onClick={this.props.pressNoSolutionButton}\r\n          disabled={this.props.submitButtonDisable || this.props.attemptNum === 0}\r\n\r\n        >No Solution</button>\r\n      </div>;\r\n    }\r\n\r\n    let inputField = null;\r\n    if (this.props.screenWidth > 1200) {\r\n      inputField = <div className=\"d-flex flex-row justify-content-around submit-margin-top inputfield-max-width\">\r\n        <div className=\"form-group\">\r\n          <input id=\"expression\" className=\"form-control\" type=\"text\" value={displayExpression} readOnly />\r\n          <p id=\"result-text\">{resultText}</p>\r\n        </div>\r\n        <button\r\n          id=\"delete-button\"\r\n          className=\"btn btn-round-blue\"\r\n          onClick={() => {\r\n            this.props.pressDeleteInputButton();\r\n          }}\r\n          disabled={this.props.submitButtonDisable || this.props.attemptNum === 0}\r\n        ><FontAwesomeIcon icon={faBackspace} size=\"1x\" /></button>\r\n        <div className=\"break\"></div>\r\n        <button\r\n          className=\"btn btn-round-green\"\r\n          onClick={() => {\r\n            this.disableSubmitButtonTemp()\r\n            this.props.pressCalculateResultButton()\r\n          }}\r\n          disabled={this.state.submitButtonRest || this.props.submitButtonDisable || this.props.attemptNum === 0}\r\n        >Submit</button>\r\n      </div>;\r\n    } else {\r\n      inputField = <div className=\"d-flex flex-row justify-content-around submit-margin-top inputfield-max-width\">\r\n        <div className=\"form-group\">\r\n          <input id=\"expression\" className=\"form-control\" type=\"text\" value={displayExpression} readOnly />\r\n          <p id=\"result-text\">{resultText}</p>\r\n        </div>\r\n        <button\r\n          id=\"delete-button\"\r\n          className=\"btn btn-round-blue\"\r\n          onClick={() => {\r\n            this.props.pressDeleteInputButton();\r\n          }}\r\n          disabled={this.props.submitButtonDisable || this.props.attemptNum === 0}\r\n        ><FontAwesomeIcon icon={faBackspace} size=\"1x\" /></button>\r\n        <div className=\"break\"></div>\r\n        <button\r\n          className=\"btn btn-round-green\"\r\n          onClick={() => {\r\n            this.disableSubmitButtonTemp()\r\n            this.props.pressCalculateResultButton()\r\n          }}\r\n          disabled={this.state.submitButtonRest || this.props.submitButtonDisable || this.props.attemptNum === 0}\r\n        >Submit</button>\r\n      </div>;\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {numberBtns}\r\n        {operateBtns}\r\n        {inputField}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameBoard;\r\n","import React, { Component } from 'react';\r\nimport ExitRoomButton from \"./common/ExitRoomButton\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Roster from \"./Roster\";\r\n\r\nconst GameSideBar = (props) => {\r\n  return (\r\n    <div className=\"menu-sidebar\" style={{ backgroundColor: \"yellow\" }}>\r\n      <div id=\"menu-sidebar-top\">\r\n        <div className=\"float-left\">\r\n          <ExitRoomButton\r\n            onCancel={props.exitRoomButtonPress}\r\n          ></ExitRoomButton>\r\n        </div>\r\n        <div className=\"float-right\">\r\n          <a\r\n            id=\"menu-switch\"\r\n            onClick={props.switchScoresMenu}\r\n          >\r\n            {props.gameModeScoresMenuOpen === false ?\r\n              <FontAwesomeIcon icon={faBars} size=\"2x\" /> :\r\n              <FontAwesomeIcon icon={faTimes} size=\"2x\" />}\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <div className={props.gameModeScoresMenuOpen === false ? \"menu-sidebar-info\" : \"menu-sidebar-info-whentrue\"} style={{ clear: \"both\" }}>\r\n        <h2 id=\"round-text\" className=\"fnt-bold\">Round</h2>\r\n        <p>{props.whichRound} of {props.numOfRound}</p>\r\n        <h2 id=\"score-text\" className=\"fnt-bold\">My Score</h2>\r\n        <p>{props.multiplayerTotalScore}</p>\r\n        <h2 id=\"score-text\" className=\"fnt-bold\">Players</h2>\r\n        <Roster\r\n          playerRoster={props.playerRoster}\r\n          playerSolved={props.playerSolved}\r\n          pageController={props.pageController}\r\n          playerColor={props.playerColor}\r\n        ></Roster>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default GameSideBar;","import React, { useEffect } from \"react\";\r\nimport GameBoard from \"./GameBoard\";\r\nimport { useWindowSize } from './common/useWindowSize.js';\r\nimport GameSideBar from \"./GameSideBar\";\r\nimport './MultiGamePage.css';\r\n\r\nconst MultiGamePage = (props) => {\r\n  let screenWidth = useWindowSize().width;\r\n\r\n  useEffect(() => {\r\n    if (screenWidth > 1200 && props.gameModeScoresMenuOpen === true) {\r\n      props.setGameModeScoresMenuOpenFalse();\r\n    }\r\n  });\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"container-fluid h-100\">\r\n      <div className={props.gameModeScoresMenuOpen === false ? \"row h-100\" : \"row h-100 grey-content\"}>\r\n        {/* A fixed width column */}\r\n        <GameSideBar\r\n          exitRoomButtonPress={props.exitRoomButtonPress}\r\n          switchScoresMenu={props.switchScoresMenu}\r\n          gameModeScoresMenuOpen={props.gameModeScoresMenuOpen}\r\n          whichRound={props.whichRound}\r\n          numOfRound={props.numOfRound}\r\n          multiplayerTotalScore={props.multiplayerTotalScore}\r\n          playerRoster={props.playerRoster}\r\n          playerSolved={props.playerSolved}\r\n          pageController={props.pageController}\r\n          playerColor={props.playerColor}\r\n        />\r\n        {/* The game board area */}\r\n        <div className={props.gameModeScoresMenuOpen === false ? \"col\" : \"display-none\"}>\r\n          <div id=\"rightside-hostpage\" className=\"w-100 h-100\">\r\n            <div className=\"gameboard-background d-flex flex-column align-items-center \">\r\n              <h2 id=\"game-top-text\" className=\"fnt-bold\">\r\n                Try to reach <span id=\"goal-text\" className=\"fnt-regular\">{props.targetNum}</span> in <span id=\"timer-text\" className=\"fnt-regular\">{props.timeInGame}</span> seconds!\r\n              {/* this.props.targetNum */}\r\n              </h2>\r\n              <GameBoard\r\n                gameNumbers={props.gameNumbers}\r\n                //gameNumbers={['1', '2', '3', '4']}\r\n                screenWidth={screenWidth}\r\n                addNumToInput={props.addNumToInput}\r\n                expressionInput={props.expressionInput}\r\n                targetNum={props.targetNum}\r\n                operators={props.operators}\r\n                pressDeleteInputButton={props.pressDeleteInputButton}\r\n                pressCalculateResultButton={props.pressCalculateResultButton}\r\n                answer={props.answer}\r\n                multiplayerButtonDisable={props.multiplayerButtonDisable}\r\n                answerCorrect={props.answerCorrect}\r\n                pressNoSolutionButton={props.pressNoSolutionButton}\r\n                submitButtonDisable={props.submitButtonDisable}\r\n                attemptNum={props.attemptNum}\r\n              //attemptNum={1}\r\n              ></GameBoard>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MultiGamePage;","import React from \"react\";\r\nimport ExitRoomButton from \"./common/ExitRoomButton\";\r\nimport './CountDownPage.css';\r\n\r\nconst CountDownPage = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <div style={{ marginTop: \"1.5rem\" }}>\r\n        <ExitRoomButton\r\n          onCancel={props.exitRoomButtonPress}\r\n        />\r\n      </div>\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <h1 className=\"fnt-bold\" style={{ marginTop: \"9rem\" }}>Get ready!</h1>\r\n        <h3 className=\"fnt-bold\" style={{ marginTop: \"5rem\" }}>The game will start in</h3>\r\n        <h1 style={{ marginTop: \"1rem\" }}>{props.timeInGame}</h1>\r\n        <h3 className=\"fnt-bold\" style={{ marginTop: \"1rem\", marginBottom: \"5rem\" }}>seconds</h3>\r\n        <div id=\"countdownpage-tip-wrapper\">\r\n          <h3 id=\"tip-title\">Tips</h3>\r\n          <p id=\"tip-content\">You only have 3 attemps each round</p>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default CountDownPage;","import React, { useEffect, useState } from \"react\";\r\nimport { useWindowSize } from './common/useWindowSize.js';\r\nimport MenuSetting from \"./MenuSetting\";\r\nimport ExitRoomButton from \"./common/ExitRoomButton\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Loader from 'react-loader-spinner';\r\nimport Button from \"./common/Button\";\r\nimport \"./SingleGamePage.css\";\r\nimport \"./HostPage.css\";\r\nimport withRoom from './withRoom.jsx';\r\nimport CountDownPage from './CountDownPage';\r\n/**\r\n * \r\n * Except the settings part and setGameModeSettingMenuOpenFalse, this component should be totally separated from the app.js\r\n */\r\n// One second in ms.\r\nconst ONE_SECOND = 1000;\r\nconst SETTINGSPAGE = \"settingsPage\";\r\nconst PREPAREPAGE = \"preparePage\";\r\nconst GAMEPAGE = \"gamePage\";\r\nconst BTWROUNDPAGE = \"betweenRoundPage\";\r\nconst ENDPAGE = \"endPage\";\r\n// Contains all the running setTimeout functions.\r\nlet timeouts = [];\r\nlet x = 3;\r\nconst SingleGamePage = (props) => {\r\n\r\n  let screenWidth = useWindowSize().width;\r\n\r\n  // states\r\n  const [questions, setQuestions] = useState([]);\r\n  const [solutions, setSolutions] = useState([]);\r\n  const [startGameButtonDisabled, setStartGameButtonDisabled] = useState(false);\r\n  const [pageCtrl, setPageCtrl] = useState(SETTINGSPAGE);\r\n  const [countDownTime, setCountDownTime] = useState();\r\n\r\n  useEffect(() => {\r\n    if (screenWidth > 1200 && props.gameModeSettingMenuOpen === true) {\r\n      props.setGameModeSettingMenuOpenFalse();\r\n    }\r\n  });\r\n\r\n  const pause = (ms) => {\r\n    return new Promise((resolve, reject) => {\r\n      //this.timeouts.push(setTimeout(resolve, ms));\r\n      //this.timerPromiseReject = reject;\r\n      timeouts.push(setTimeout(resolve, ms));\r\n    });\r\n  };\r\n\r\n  const pressStartGameButton = async () => {\r\n    let settingPackageObject = {\r\n      numOfSlots: props.slotNum, //int\r\n      targetNumber: props.targetNum, //int\r\n      availableOperators: props.availableOperator, //array of string\r\n      rangeLo: props.rangeOfAvailableNumberLowBound, //int\r\n      rangeHi: props.rangeOfAvailableNumberHighBound, //int\r\n      maxNumOfRepeats: props.maxRepeatNum, //int\r\n      roundDuration: props.roundDuration * 1000, //int (ms)\r\n      numOfRounds: props.numOfRound, //int\r\n    };\r\n    //setCountDownTime(5)\r\n    setPageCtrl(PREPAREPAGE);\r\n    for (let i = 5; i > 0; i--) {\r\n      //console.log(\"here\" + countDownTime);\r\n      setCountDownTime(i);\r\n      await pause(1000);\r\n    }\r\n    setPageCtrl(GAMEPAGE);\r\n    //setStartGameButtonDisabled(true);\r\n  };\r\n\r\n  const renderSwitch = () => {\r\n    switch (pageCtrl) {\r\n      case SETTINGSPAGE:\r\n        return (<div className=\"container-fluid h-100\">\r\n          <div className={props.gameModeSettingMenuOpen === false ? \"row h-100\" : \"row h-100 grey-content\"}>\r\n            {/* A fixed width column */}\r\n            <div className=\"menu-sidebar-hostpage\">\r\n              <div id=\"menu-sidebar-top\" style={{ clear: \"both\" }}>\r\n                <div className=\"float-left\">\r\n                  <ExitRoomButton\r\n                    onCancel={() => { timeouts.forEach(clearTimeout); props.exitRoomButtonPress() }}\r\n                  ></ExitRoomButton>\r\n                </div>\r\n                <div className=\"float-right\">\r\n                  <a\r\n                    id=\"menu-switch\"\r\n                    onClick={props.switchSettingsMenu}\r\n                  >\r\n                    {props.gameModeSettingMenuOpen === false ?\r\n                      <FontAwesomeIcon icon={faBars} size=\"2x\" /> :\r\n                      <FontAwesomeIcon icon={faTimes} size=\"2x\" />}\r\n                  </a>\r\n                </div>\r\n              </div>\r\n              <div className={props.gameModeSettingMenuOpen === false ? \"display-none\" : \"grey-content\"}>\r\n                <MenuSetting\r\n                  handleSlotNumChange={props.handleSlotNumChange}\r\n                  handleTargetNumChange={props.handleTargetNumChange}\r\n                  pressMenuCloseButton={props.pressMenuCloseButton}\r\n                  handleRangeOfAvailableNumberLowBoundInput={\r\n                    props.handleRangeOfAvailableNumberLowBoundInput\r\n                  }\r\n                  handleRangeOfAvailableNumberHighBoundInput={\r\n                    props.handleRangeOfAvailableNumberHighBoundInput\r\n                  }\r\n                  handleMaxRepeatNumInput={props.handleMaxRepeatNumInput}\r\n                  handleRoundDurationInput={props.handleRoundDurationInput}\r\n                  handleNumOfRoundInput={props.handleNumOfRoundInput}\r\n                  handleAvailableOperatorCheckbox={\r\n                    props.handleAvailableOperatorCheckbox\r\n                  }\r\n                  backToDefaultSettings={props.backToDefaultSettings}\r\n                  slotNum={props.slotNum}\r\n                  targetNum={props.targetNum}\r\n                  showMenuBoolean={props.gameModeSettingMenuOpen}\r\n                  rangeOfAvailableNumberLowBound={\r\n                    props.rangeOfAvailableNumberLowBound\r\n                  }\r\n                  rangeOfAvailableNumberHighBound={\r\n                    props.rangeOfAvailableNumberHighBound\r\n                  }\r\n                  maxRepeatNum={props.maxRepeatNum}\r\n                  roundDuration={props.roundDuration}\r\n                  numOfRound={props.numOfRound}\r\n                  availableOperator={props.availableOperator}\r\n                ></MenuSetting>\r\n              </div>\r\n            </div>\r\n            <div className={props.gameModeSettingMenuOpen === false ? \"col text-center\" : \"display-none\"}>\r\n              <h1 className=\"fnt-bold grey-text\" style={{ marginTop: \"6rem\" }}>\r\n                Start the game\r\n            </h1>\r\n              <div style={{ marginTop: \"6rem\" }}>\r\n                <div>\r\n                  <Button\r\n                    onClick={pressStartGameButton}\r\n                    disabled={startGameButtonDisabled}\r\n                    style={0}\r\n                    display={startGameButtonDisabled === true ?\r\n                      <div className=\"force-inline\">\r\n                        <Loader\r\n                          type=\"TailSpin\"\r\n                          color=\"#00BFFF\"\r\n                          height={20}\r\n                          width={20}\r\n                        />\r\n                      </div> :\r\n                      \"Start\"}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>);\r\n      case PREPAREPAGE:\r\n        return (\r\n          <CountDownPage\r\n            timeInGame={countDownTime}\r\n          />);\r\n\r\n\r\n\r\n      case GAMEPAGE:\r\n        return (<h1>Game</h1>);\r\n\r\n    }\r\n  }\r\n\r\n  //return renderSwitch();\r\n  return <React.Fragment><ExitRoomButton\r\n    onCancel={() => { timeouts.forEach(clearTimeout); props.exitRoomButtonPress() }}\r\n  ></ExitRoomButton>\r\n    <div className=\"h-100 w-100 d-flex flex-row align-items-center justify-content-center\"><h1 className=\"fnt-bold\">Under Construction...</h1></div>\r\n  </React.Fragment>\r\n\r\n}\r\n\r\nexport default SingleGamePage;\r\n//export default SingleGamePage;","import React from \"react\";\r\nimport Loader from 'react-loader-spinner';\r\nimport ExitRoomButton from \"./common/ExitRoomButton\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nconst LoadingPage = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <div style={{ marginTop: \"1.5rem\" }}>\r\n        <ExitRoomButton\r\n          onCancel={props.exitRoomButtonPress}\r\n        />\r\n      </div>\r\n      <div className=\"center-horizontal\" style={{ marginTop: \"18rem\" }}>\r\n        <Loader\r\n          type=\"Oval\"\r\n          color=\"#4194F8\"\r\n          height={100}\r\n          width={100}\r\n        />\r\n      </div>\r\n      <h3 className=\"center-horizontal\" style={{ marginTop: \"1rem\" }}>Loading...</h3>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default LoadingPage;","function solutionFunc(solution) {\r\n  if (solution === null) {\r\n    return \"submitted \\\"no solution\\\"\";\r\n  } else if (solution === undefined) {\r\n    return \"never submitted a solution\";\r\n  }\r\n  return solution;\r\n}\r\nexport default solutionFunc;","import React from \"react\";\r\n\r\n/**\r\n * \r\n * Display the player solution ranks (three) between rounds\r\n */\r\nconst ScoresRank = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <table className=\"table table-hover\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">POS.</th>\r\n            <th scope=\"col\">Nickname</th>\r\n            <th scope=\"col\">Scores</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.scoreRanking.map((pair, index) => {\r\n            return <tr className={index === 0 ? \"gold-text\" : index === 1 ? \"silver-text\" : index === 2 ? \"copper-text\" : \"\"}>\r\n              <th scope=\"row\">{index + 1}</th>\r\n              <td>{pair.name}</td>\r\n              <td>{pair.totalScore}</td>\r\n            </tr>\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ScoresRank;","/**\r\n * if the name string is longer than 10 letters, use ... at the end instead to shorten the total length\r\n * @param {any object} original \r\n */\r\nexport const shortenName = (original) => {\r\n  if (original.length > 10) {\r\n    return original.slice(0, 10) + \"...\";\r\n  }\r\n  return original;\r\n};","import React, { useEffect } from \"react\";\r\nimport SolutionsRank from \"./SolutionsRank\";\r\nimport ScoresRank from \"./ScoresRank\";\r\nimport { useWindowSize } from './common/useWindowSize.js';\r\nimport GameSideBar from \"./GameSideBar\";\r\nimport './BetweenRoundPage.css';\r\nimport { shortenName } from './common/shortenName.js'\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport SwiperCore, { Pagination } from 'swiper';\r\nimport 'swiper/swiper-bundle.css';\r\n\r\nSwiperCore.use([Pagination]);\r\n\r\nconst BetweenRoundPage = (props) => {\r\n  let screenWidth = useWindowSize().width;\r\n\r\n  useEffect(() => {\r\n    if (screenWidth > 1200 && props.gameModeScoresMenuOpen === true) {\r\n      props.setGameModeScoresMenuOpenFalse();\r\n    }\r\n  });\r\n\r\n  const slides = [];\r\n\r\n  if (props.scoreRanking[0] !== undefined) {\r\n    var firstPlayerName = props.scoreRanking[0].name;\r\n    var firstPlayerScore = props.scoreRanking[0].totalScore;\r\n  }\r\n  if (props.scoreRanking[1] !== undefined) {\r\n    var secondPlayerName = props.scoreRanking[1].name;\r\n    var secondPlayerScore = props.scoreRanking[1].totalScore;\r\n  }\r\n  if (props.scoreRanking[2] !== undefined) {\r\n    var thirdPlayerName = props.scoreRanking[2].name;\r\n    var thirdPlayerScore = props.scoreRanking[2].totalScore;\r\n  }\r\n\r\n\r\n\r\n\r\n  // let secondPlayerName = props.playerRanking[1].name;\r\n  // let thirdPlayerName = props.playerRanking[2].name;\r\n\r\n  // let secondPlayerScore = props.playerRanking[1].totalScore;\r\n  // let thirdPlayerScore = props.playerRanking[2].totalScore;\r\n\r\n  slides.push(\r\n    <React.Fragment>\r\n      <div className={props.answerCorrect === true ? \"solution-box-victory\" : \"solution-box-lost\"}>\r\n        <div className=\"d-flex flex-column align-items-center h-100\" style={{ backgroundColor: props.answerCorrect === true ? \"#E0FFE2\" : \"#FFE0E0\" }}>\r\n          {props.answerCorrect === true ?\r\n            <h1 className=\"fnt-bold text-center\" style={{ color: \"#76EF8D\", marginBottom: \"3rem\", marginTop: \"2rem\" }}>Correct!</h1> :\r\n            <h1 className=\"fnt-bold text-center\" style={{ color: \"#FF5F5F\", marginBottom: \"3rem\", marginTop: \"2rem\" }}>Incorrect!</h1>}\r\n          <h3 className=\"fnt-regular\">\r\n            Your solution\r\n          </h3>\r\n          <h2 style={{ marginBottom: \"2rem\" }}>{(props.expressionInput === null || props.expressionInput === \"\" ? \"No solution\" : props.expressionInput)}</h2>\r\n\r\n          <h3>Here's our solution</h3>\r\n          <h2>{props.solution}</h2>\r\n\r\n          <hr style={{ width: \"85%\", marginBottom: \"2rem\", marginTop: \"2rem\" }}></hr>\r\n          <h3 className=\"fnt-regular\">\r\n            Top solutions\r\n          </h3>\r\n          <div style={{ marginTop: \"1rem\" }}></div>\r\n          <table className=\"table-answer\" style={{ backgroundColor: \"\", width: \"85%\", margin: \"auto\" }}>\r\n            {props.playerSolutions.map((eachPlayer, index) => {\r\n              return <React.Fragment>\r\n                <tr>\r\n                  <td>\r\n                    <span className={index === 0 ? \"blue-dot\" : index === 1 ? \"red-dot\" : index === 2 ? \"yellow-dot\" : \"\"} />\r\n                    <span className=\"solution-player-name\">{\" \" + shortenName(eachPlayer.name)}</span>\r\n                  </td>\r\n                  <td><h2 className=\"text-align-right\" style={{ textAlign: \"right\" }}>{eachPlayer.solution === null || eachPlayer.solution === \"\" ? \"\" : eachPlayer.solution}</h2></td>\r\n                </tr>\r\n                <div style={{ marginTop: \"0.8rem\" }}></div>\r\n              </React.Fragment>\r\n            })}\r\n          </table>\r\n          <h6 className=\"mt-auto bottom-time-text\">{(props.isLastRound === true ?\r\n            \"The summary page will appear in \" :\r\n            \"Next round will begin in \")}\r\n            <span className=\"h3\">{props.timeInGame + \" \"}</span>\r\n            seconds\r\n          </h6>\r\n        </div>\r\n      </div>\r\n    </React.Fragment >\r\n  );\r\n\r\n\r\n  slides.push(\r\n    <React.Fragment>\r\n      <div className=\"ranking-box\">\r\n        <div className=\"d-flex flex-column align-items-center h-100\">\r\n          <div style={{ marginTop: \"10rem\" }}><h3 className=\"text-center\">You currently rank No.{props.playerRanking}</h3></div>\r\n          <div style={{ marginBottom: \"1.2rem\" }}></div>\r\n          <div>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 82.837 115.842\">\r\n              <g id=\"award-fill\" transform=\"translate(0.535 0.563)\">\r\n                <path id=\"Path_10\" data-name=\"Path 10\" d=\"M43.177,0,55.135,6.19,68.447,8.211,74.48,20.248l9.579,9.458L81.867,42.989,84.06,56.273,74.48,65.731,68.447,77.768l-13.312,2.02-11.958,6.19-11.958-6.19-13.312-2.02L11.873,65.731,2.294,56.273,4.486,42.989,2.294,29.706l9.579-9.458L17.906,8.211,31.219,6.19Z\" transform=\"translate(-2.294)\" fill=\"gold\" stroke=\"#707070\" stroke-width=\"1\" />\r\n                <path id=\"Path_11\" data-name=\"Path 11\" d=\"M4,11.794V41.93l28.66-7.165,28.66,7.165V11.794L46.86,13.986l-14.2,7.351-14.2-7.351Z\" transform=\"translate(8.223 72.709)\" fill=\"gold\" stroke=\"#707070\" stroke-width=\"1\" />\r\n              </g>\r\n              <text id=\"_1\" data-name=\"1\" transform=\"translate(25.535 65.563)\" fill=\"#fff\" font-size=\"60\" font-family=\"SegoeUI, Segoe UI\"><tspan x=\"0\" y=\"0\">1</tspan></text>\r\n            </svg>\r\n            <h2 className=\"d-inline-block ranking-name\">{firstPlayerName}<br />{firstPlayerScore}</h2>\r\n\r\n          </div>\r\n          <div style={{ marginBottom: \"1.2rem\" }}></div>\r\n          <div>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 82.837 116.279\">\r\n              <g id=\"award-fill\" transform=\"translate(0.535 1)\">\r\n                <path id=\"Path_10\" data-name=\"Path 10\" d=\"M43.177,0,55.135,6.19,68.447,8.211,74.48,20.248l9.579,9.458L81.867,42.989,84.06,56.273,74.48,65.731,68.447,77.768l-13.312,2.02-11.958,6.19-11.958-6.19-13.312-2.02L11.873,65.731,2.294,56.273,4.486,42.989,2.294,29.706l9.579-9.458L17.906,8.211,31.219,6.19Z\" transform=\"translate(-2.294)\" fill=\"silver\" stroke=\"#707070\" stroke-width=\"1\" />\r\n                <path id=\"Path_11\" data-name=\"Path 11\" d=\"M4,11.794V41.93l28.66-7.165,28.66,7.165V11.794L46.86,13.986l-14.2,7.351-14.2-7.351Z\" transform=\"translate(8.223 72.709)\" fill=\"silver\" stroke=\"#707070\" stroke-width=\"1\" />\r\n              </g>\r\n              <text id=\"_2\" data-name=\"2\" transform=\"translate(42.535 65)\" fill=\"#fff\" font-size=\"60\" font-family=\"SegoeUI, Segoe UI\"><tspan x=\"-16.172\" y=\"0\">2</tspan></text>\r\n            </svg>\r\n            <h2 className=\"d-inline-block ranking-name\">{secondPlayerName}<br />{secondPlayerScore}</h2>\r\n          </div>\r\n          <div style={{ marginBottom: \"1.2rem\" }}></div>\r\n          <div>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 82.837 115.842\">\r\n              <g id=\"award-fill\" transform=\"translate(0.535 0.563)\">\r\n                <path id=\"Path_10\" data-name=\"Path 10\" d=\"M43.177,0,55.135,6.19,68.447,8.211,74.48,20.248l9.579,9.458L81.867,42.989,84.06,56.273,74.48,65.731,68.447,77.768l-13.312,2.02-11.958,6.19-11.958-6.19-13.312-2.02L11.873,65.731,2.294,56.273,4.486,42.989,2.294,29.706l9.579-9.458L17.906,8.211,31.219,6.19Z\" transform=\"translate(-2.294)\" fill=\"#cd8032\" stroke=\"#707070\" stroke-width=\"1\" />\r\n                <path id=\"Path_11\" data-name=\"Path 11\" d=\"M4,11.794V41.93l28.66-7.165,28.66,7.165V11.794L46.86,13.986l-14.2,7.351-14.2-7.351Z\" transform=\"translate(8.223 72.709)\" fill=\"#cd8032\" stroke=\"#707070\" stroke-width=\"1\" />\r\n              </g>\r\n              <text id=\"_3\" data-name=\"3\" transform=\"translate(41.535 65.563)\" fill=\"#fff\" font-size=\"60\" font-family=\"SegoeUI, Segoe UI\"><tspan x=\"-16.172\" y=\"0\">3</tspan></text>\r\n            </svg>\r\n\r\n            <h2 className=\"d-inline-block ranking-name\">{thirdPlayerName}<br />{thirdPlayerScore}</h2>\r\n          </div>\r\n          <h6 className=\"mt-auto\">{(props.isLastRound === true ?\r\n            \"The summary page will appear in \" :\r\n            \"Next round will begin in \")}\r\n            <span className=\"h3\">{props.timeInGame + \" \"}</span>\r\n            seconds\r\n          </h6>\r\n        </div>\r\n      </div>\r\n    </React.Fragment >\r\n  );\r\n\r\n  return (\r\n    <div className=\"container-fluid h-100\">\r\n      <div className={props.gameModeScoresMenuOpen === false ? \"row h-100 \" : \"row h-100 grey-content\"}>\r\n        {/* A fixed width column */}\r\n        <GameSideBar\r\n          exitRoomButtonPress={props.exitRoomButtonPress}\r\n          switchScoresMenu={props.switchScoresMenu}\r\n          gameModeScoresMenuOpen={props.gameModeScoresMenuOpen}\r\n          whichRound={props.whichRound}\r\n          numOfRound={props.numOfRound}\r\n          multiplayerTotalScore={props.multiplayerTotalScore}\r\n          playerRoster={props.playerRoster}\r\n          playerSolved={props.playerSolved}\r\n          pageController={props.pageController}\r\n          playerColor={props.playerColor}\r\n        />\r\n        {/* The game board area */}\r\n        <div className={props.gameModeScoresMenuOpen === false ? \"col w-100 col-content\" : \"display-none\"}>\r\n          <div id=\"rightside-hostpage\" className=\"d-flex flex-column align-items-center h-100 w-100\">\r\n            {screenWidth < 1200 ?\r\n              <Swiper className=\"swiper-container\" pagination>{slides.map((slide) => <SwiperSlide>{slide}</SwiperSlide>)}</Swiper> :\r\n              <React.Fragment>\r\n                <div style={{ marginTop: \"8rem\" }}></div>\r\n                <div className={props.answerCorrect === true ? \"solution-box answer-correct-bg-color\" : \"solution-box answer-incorrect-bg-color\"}>\r\n                  <div className=\"container\">\r\n                    <div className=\"row justify-content-center\" style={{ height: \"4rem\" }}>\r\n                      <div className=\"col\">\r\n                        {props.answerCorrect === true ?\r\n                          <h2 className=\"fnt-bold text-center\" style={{ color: \"#76EF8D\" }}>Correct!</h2> :\r\n                          <h2 className=\"fnt-bold text-center\" style={{ color: \"#FF5F5F\" }}>Incorrect!</h2>}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                      <div className=\"col\">\r\n                        <h3 className=\"fnt-regular text-center\">\r\n                          Your solution<br /><br />\r\n                          <h2>{(props.expressionInput === null || props.expressionInput === \"\" ? \"No solution\" : props.expressionInput)}</h2><br />\r\n                          Here's our solution<br /><br />\r\n                          <h2>{props.solution}</h2>\r\n                        </h3>\r\n                      </div>\r\n                      <div className=\"col\">\r\n                        <h3 className=\"fnt-regular text-center\">\r\n                          Top solutions\r\n                        </h3>\r\n                        <div style={{ marginTop: \"1rem\" }}></div>\r\n                        <table style={{ backgroundColor: \"\", width: \"70%\", margin: \"auto\" }}>\r\n                          {props.playerSolutions.map((eachPlayer, index) => {\r\n                            return <React.Fragment>\r\n                              <tr>\r\n                                <td>\r\n                                  <span className={index === 0 ? \"blue-dot\" : index === 1 ? \"red-dot\" : index === 2 ? \"yellow-dot\" : \"\"} />\r\n                                  <span className=\"solution-player-name\">{\" \" + shortenName(eachPlayer.name)}</span>\r\n                                </td>\r\n                                <td><h2 className=\"text-align-right\" style={{ textAlign: \"right\" }}>{eachPlayer.solution === null || eachPlayer.solution === \"\" ? \"\" : eachPlayer.solution}</h2></td>\r\n                              </tr>\r\n                              <div style={{ marginTop: \"0.8rem\" }}></div>\r\n                            </React.Fragment>\r\n                          })}\r\n                        </table>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div style={{ marginTop: \"1rem\" }}></div>\r\n                <div className=\"ranking-box\">\r\n                  <div className=\"container\">\r\n                    <div className=\"row\" style={{ height: \"4rem\" }}>\r\n                      <div className=\"col\"><h3 className=\"text-center\">You currently rank No.{props.playerRanking}</h3></div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col text-center\" style={{ position: \"relative\", top: \"1rem\" }}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"60\" height=\"116.279\" viewBox=\"0 0 82.837 116.279\">\r\n                          <g id=\"award-fill\" transform=\"translate(0.535 1)\">\r\n                            <path id=\"Path_10\" data-name=\"Path 10\" d=\"M43.177,0,55.135,6.19,68.447,8.211,74.48,20.248l9.579,9.458L81.867,42.989,84.06,56.273,74.48,65.731,68.447,77.768l-13.312,2.02-11.958,6.19-11.958-6.19-13.312-2.02L11.873,65.731,2.294,56.273,4.486,42.989,2.294,29.706l9.579-9.458L17.906,8.211,31.219,6.19Z\" transform=\"translate(-2.294)\" fill=\"silver\" stroke=\"#707070\" stroke-width=\"1\" />\r\n                            <path id=\"Path_11\" data-name=\"Path 11\" d=\"M4,11.794V41.93l28.66-7.165,28.66,7.165V11.794L46.86,13.986l-14.2,7.351-14.2-7.351Z\" transform=\"translate(8.223 72.709)\" fill=\"silver\" stroke=\"#707070\" stroke-width=\"1\" />\r\n                          </g>\r\n                          <text id=\"_2\" data-name=\"2\" transform=\"translate(42.535 65)\" fill=\"#fff\" font-size=\"60\" font-family=\"SegoeUI, Segoe UI\"><tspan x=\"-16.172\" y=\"0\">2</tspan></text>\r\n                        </svg>\r\n\r\n                        <h2 className=\"d-inline-block ranking-name\">{secondPlayerName}<br />{secondPlayerScore}</h2>\r\n                      </div>\r\n                      <div className=\"col text-center\" style={{ position: \"relative\", top: \"-2rem\" }}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"60\" height=\"115.842\" viewBox=\"0 0 82.837 115.842\">\r\n                          <g id=\"award-fill\" transform=\"translate(0.535 0.563)\">\r\n                            <path id=\"Path_10\" data-name=\"Path 10\" d=\"M43.177,0,55.135,6.19,68.447,8.211,74.48,20.248l9.579,9.458L81.867,42.989,84.06,56.273,74.48,65.731,68.447,77.768l-13.312,2.02-11.958,6.19-11.958-6.19-13.312-2.02L11.873,65.731,2.294,56.273,4.486,42.989,2.294,29.706l9.579-9.458L17.906,8.211,31.219,6.19Z\" transform=\"translate(-2.294)\" fill=\"gold\" stroke=\"#707070\" stroke-width=\"1\" />\r\n                            <path id=\"Path_11\" data-name=\"Path 11\" d=\"M4,11.794V41.93l28.66-7.165,28.66,7.165V11.794L46.86,13.986l-14.2,7.351-14.2-7.351Z\" transform=\"translate(8.223 72.709)\" fill=\"gold\" stroke=\"#707070\" stroke-width=\"1\" />\r\n                          </g>\r\n                          <text id=\"_1\" data-name=\"1\" transform=\"translate(25.535 65.563)\" fill=\"#fff\" font-size=\"60\" font-family=\"SegoeUI, Segoe UI\"><tspan x=\"0\" y=\"0\">1</tspan></text>\r\n                        </svg>\r\n\r\n                        <h2 className=\"d-inline-block ranking-name\">{firstPlayerName}<br />{firstPlayerScore}</h2>\r\n                      </div>\r\n                      <div className=\"col text-center\" style={{ position: \"relative\", top: \"1rem\" }}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"60\" height=\"115.842\" viewBox=\"0 0 82.837 115.842\">\r\n                          <g id=\"award-fill\" transform=\"translate(0.535 0.563)\">\r\n                            <path id=\"Path_10\" data-name=\"Path 10\" d=\"M43.177,0,55.135,6.19,68.447,8.211,74.48,20.248l9.579,9.458L81.867,42.989,84.06,56.273,74.48,65.731,68.447,77.768l-13.312,2.02-11.958,6.19-11.958-6.19-13.312-2.02L11.873,65.731,2.294,56.273,4.486,42.989,2.294,29.706l9.579-9.458L17.906,8.211,31.219,6.19Z\" transform=\"translate(-2.294)\" fill=\"#cd8032\" stroke=\"#707070\" stroke-width=\"1\" />\r\n                            <path id=\"Path_11\" data-name=\"Path 11\" d=\"M4,11.794V41.93l28.66-7.165,28.66,7.165V11.794L46.86,13.986l-14.2,7.351-14.2-7.351Z\" transform=\"translate(8.223 72.709)\" fill=\"#cd8032\" stroke=\"#707070\" stroke-width=\"1\" />\r\n                          </g>\r\n                          <text id=\"_3\" data-name=\"3\" transform=\"translate(41.535 65.563)\" fill=\"#fff\" font-size=\"60\" font-family=\"SegoeUI, Segoe UI\"><tspan x=\"-16.172\" y=\"0\">3</tspan></text>\r\n                        </svg>\r\n\r\n                        <h2 className=\"d-inline-block ranking-name\">{thirdPlayerName}<br />{thirdPlayerScore}</h2>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div style={{ marginTop: \"1rem\" }}></div>\r\n                <h6>{(props.isLastRound === true ?\r\n                  \"The summary page will appear in \" :\r\n                  \"Next round will begin in \")}\r\n                  <span className=\"h3\">{props.timeInGame + \" \"}</span>\r\n                  seconds\r\n                </h6>\r\n              </React.Fragment>}\r\n            {/* <div style={{ marginTop: \"1rem\" }}></div> */}\r\n            {/* <h2 id=\"game-top-text\" className=\"fnt-bold\">\r\n              <h1>Round {props.whichRound}</h1>\r\n              <h1>Result</h1>\r\n              <h1>System Solution (random one)</h1>\r\n              <h1>{props.solution}</h1>\r\n              <div className=\"col h-100 text-center overflow-auto\">\r\n                <h1>Player Solutions (the top three)</h1>\r\n                <SolutionsRank\r\n                  playerSolutions={props.playerSolutions}>\r\n\r\n                </SolutionsRank>\r\n              </div>\r\n\r\n            </h2>\r\n            <h3>Your Ranking in the Room is</h3>\r\n            <h3>number {props.playerRanking}</h3>\r\n            <h3>Player Scores (the top three)</h3>\r\n            <ScoresRank\r\n              scoreRanking={props.scoreRanking}>\r\n            </ScoresRank> */}\r\n            {/* <h6>{(props.isLastRound === true ?\r\n              \"The summary page will appear in \" :\r\n              \"Next round will begin in \")}\r\n              <span className=\"h3\">6 </span>\r\n              seconds\r\n            </h6> */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div >\r\n\r\n  );\r\n}\r\n\r\nexport default BetweenRoundPage;","import React, { Component } from \"react\";\r\nimport { withTranslation } from 'react-i18next';\r\n\r\n//imported API\r\nimport { Helmet } from \"react-helmet\";\r\nimport io from \"socket.io-client\";\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import\r\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { deepCopy } from './components/deepCopy.js'\r\n\r\n//imported local classes/functions\r\nimport \"./App.css\";\r\nimport tabImage from \"./tabImage.png\";\r\nimport calculate from \"./calculate.js\";\r\nimport checkValid from \"./checkValid.js\";\r\n//all the page files\r\nimport HomePage from \"./components/HomePage\"; //1\r\nimport SolvePage from \"./components/SolvePage\"; //2\r\nimport SelectPage from \"./components/SelectPage\"; //3\r\nimport HostPage from \"./components/HostPage\"; //4\r\nimport JoinRoomPage from \"./components/JoinRoomPage\"; //5\r\nimport WaitForHostPage from \"./components/WaitForHostPage\"; //6\r\nimport MultiGamePage from \"./components/MultiGamePage\"; //7\r\nimport SingleGamePage from \"./components/SingleGamePage\"; //8\r\nimport LoadingPage from \"./components/LoadingPage\"; //9\r\nimport CountDownPage from \"./components/CountDownPage\"; //10\r\nimport BetweenRoundPage from \"./components/BetweenRoundPage\"; //11\r\nimport SummaryPage from \"./components/SummaryPage\"; //11\r\nimport { faTextHeight, faThList } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n//defined const\r\nconst TIMES = \"×\";\r\nconst DIVIDES = \"÷\";\r\nconst PLUS = \"+\";\r\nconst MINUS = \"-\";\r\nlet operators = [TIMES, DIVIDES, PLUS, MINUS];\r\n\r\n//the page const + page#\r\nconst HOMEPAGE = \"homePage\"; //1\r\nconst SOLVEPAGE = \"solvePage\"; //2\r\nconst SELECTPAGE = \"gamePage\"; //3\r\nconst HOSTPAGE = \"createRoomPage\"; //4\r\nconst JOINROOMPAGE = \"joinRoomNumPage\"; //5\r\nconst WAITFORHOSTPAGE = \"waitForHostPage\"; //6\r\nconst MULTIGAMEPAGE = \"multiPlayerGamePage\"; //7\r\nconst SINGLEGAMEPAGE = \"singlePlayerGamePage\"; //8\r\nconst LOADINGPAGE = \"gameLoadingPage\"; //9\r\nconst COUNTDOWNPAGE = \"preGameCountDownPage\"; //10\r\nconst BTWROUNDPAGE = \"betweenRoundPage\"; //11\r\nconst SUMMARYPAGE = \"summaryPage\"; //12\r\n\r\n//the messages between client and server\r\nconst CREATE_ROOM = \"createRoom\";\r\nconst JOIN_ROOM = \"joinRoom\";\r\nconst EXIT_ROOM = \"exitRoom\";\r\nconst CHANGE_SETTINGS = \"changeSettings\";\r\nconst START_GAME = \"startGame\";\r\nconst END_GAME = \"endGame\";\r\nconst SEND_SOLUTION = \"sendSolution\";\r\nconst CREATE_ROOM_SUCCESS = \"createRoomSuccess\";\r\nconst CREATE_ROOM_FAILURE = \"createRoomFailure\";\r\nconst JOIN_ROOM_SUCCESS = \"joinRoomSuccess\";\r\nconst JOIN_ROOM_FAILURE = \"joinRoomFailure\";\r\nconst ROSTER = \"roster\";\r\nconst SETTINGS = \"settings\";\r\nconst TIMER = \"timer\";\r\nconst GAME_STARTED = \"gameStarted\";\r\nconst NEW_ROUND = \"newRound\";\r\nconst END_ROUND = \"endRound\";\r\nconst SOLUTION_CORRECT = \"solutionCorrect\";\r\nconst SOLUTION_INCORRECT = \"solutionIncorrect\";\r\nconst PLAYER_SOLVED = \"playerSolved\";\r\nconst CONNECT_TIMEOUT = \"connectionTimeOut\";\r\nconst ROOM_CLOSED = \"roomClosed\";\r\n//start listening to disconnect after entering a room (either as a host or player)\r\n//stop listening to disconnect after quitting from a room (either through the exit button or the disconnect listener)\r\nconst DISCONNECT = \"disconnect\";\r\n\r\nconst server = process.env.REACT_APP_API_URL;\r\nconst socket = io.connect(server);\r\ntoast.configure();\r\nlet startGameButtonTimeObj;\r\nconst startGameTimtOutSec = 120;\r\nclass App extends Component {\r\n  state = {\r\n    //below are the local states (not received from the server)\r\n    pageController: HOMEPAGE, //default should be homePage\r\n    username: \"\", //the username during the game\r\n    gameModeSettingMenuOpen: false, //controls the display of the game mode setting menu in page 4\r\n    gameModeScoresMenuOpen: false, //controls the display of the score menu in multigame page\r\n    lang: 'en', //the displayed language, default is english. Also have Chinese as zh\r\n    loading: false, //the loader displays on the start button when the loading is true\r\n    startGameButtonDisabled: false, //disable the button for as long as 120s after press it\r\n    waitTimeMax: 300, //in s, the maximum time that the waiting room would stay open before the game is forced to start\r\n    maxPlayerNum: 10, //the maximum number of players in each room\r\n\r\n    //below are the settings for the multi-player game\r\n    gameModeBasicSetting: { slotNum: 4, targetNum: 24 }, //use as dynamic source in client side\r\n    rangeOfAvailableNumberLowBound: 1,\r\n    rangeOfAvailableNumberHighBound: 13,\r\n    maxRepeatNum: 4, //the maximum number of repeated number possible\r\n    roundDuration: 30, //the time of each round in s, in client the display is s\r\n    numOfRound: 10, //number of rounds in multi-player mode\r\n    availableOperator: operators, //the operators available for players to use in their expressions\r\n\r\n    expressionInput: [], //array of string, the inputed expression from the user\r\n    answer: null, //int, the calculated answer of the input expression\r\n    attemptNum: 0, //int, the number of attempt for a player to submit the answer each round, it is 3 by default\r\n\r\n    //Below are the signals received from the server\r\n    roomNumber: null,\r\n    //default can be [4, 6, 8, 10]\r\n    multiplayerGameNumbers: [], //if online mode, get this from the server. if offline, autogenerate this\r\n    //default can be [false, false, false, false]\r\n    multiplayerButtonDisable: [], //whether or not a button is disabled\r\n    playerRoster: [], //array of string, the name of all the players in the room\r\n    playerSolved: [], //array of string, the name of the players who solve the game in the current round\r\n    playerColor: [], //array of object ({playerName: color in hex form}), the color of all the players\r\n    roomNumMaxDigitNum: 4, //the maximum number of digits for room number, default is 4\r\n    timeInGame: null, //in s, the time sent by the server and displayed in the browser\r\n    whichRound: 0, //which round do we currently in\r\n    //default can be\"3+5*2\"\r\n    solution: \"\", //the solution solved by the computer for the problem in the current round\r\n    //the top three solutions (if there are three) done by the players for the problem in the current round\r\n    playerSolutions: [],\r\n    playerRanking: 1, //the score ranking of the player in the room\r\n    multiplayerScore: 0, //the score received from the server for the current round\r\n    multiplayerTotalScore: 0, //the score received from the server for the whole game\r\n    answerCorrect: undefined, //bool, indicates the judgement from the server\r\n    //the top three scores of the players, default can be [{ name: \"Joseph\", totalScore: 100 }]\r\n    scoreRanking: [],\r\n    submitButtonDisable: false, //once the answer is deemed to be correct by the server, disable all the buttons\r\n  };\r\n\r\n  /**\r\n   * Return false if the name is invalid, the name must be between 1 to 15 letters\r\n   */\r\n  hasValidUsername = () => {\r\n    let name = this.state.username;\r\n    return !(name === undefined || name === \"\");\r\n  };\r\n\r\n\r\n  /**\r\n   *\r\n   * @param {string} message the text that you want it to appear in the error toast\r\n   */\r\n  notifyError = (message) => toast.error(message, {\r\n    position: \"bottom-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  });\r\n\r\n  notifySuccess = (message) => toast.success(message, {\r\n    position: \"bottom-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  });\r\n\r\n  /**\r\n   * Remove all the entries that has the value value from the array\r\n   */\r\n  filterArray = (arr, value) => {\r\n    return arr.filter((ele) => {\r\n      return ele !== value;\r\n    });\r\n  };\r\n\r\n  setGameModeSettingMenuOpenFalse = () => {\r\n    this.setState({ gameModeSettingMenuOpen: false });\r\n  };\r\n\r\n  setGameModeScoresMenuOpenFalse = () => {\r\n    this.setState({ gameModeScoresMenuOpen: false });\r\n  };\r\n\r\n  /**\r\n   *\r\n   * change the displayed language of the game\r\n   */\r\n  langChange = (lang) => {\r\n    this.setState({\r\n      lang\r\n    });\r\n  };\r\n\r\n  /**\r\n   * randomly decide the color for players' image\r\n   */\r\n  randomColor = () => {\r\n    const color = Math.floor(Math.random() * 16777215).toString(16);\r\n    return '#' + color;\r\n  };\r\n\r\n\r\n  /**\r\n   * In 1st page\r\n   * In home page, choose the game mode (instead of single-player mode or solve mode)\r\n   */\r\n  pressGameModeButton = () => {\r\n    this.setState({\r\n      pageController: SELECTPAGE, //to page 3\r\n    });\r\n  };\r\n\r\n  /**\r\n   * In 1st page\r\n   * In home page, choose the solve mode\r\n   */\r\n  pressSolveModeButton = () => {\r\n    this.setState({\r\n      pageController: SOLVEPAGE, //to page 2\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Appears in multiple pages\r\n   * return back to the specified prevPage\r\n   */\r\n  handleBack = (prevPage) => {\r\n    //set all of the game-related states back to default\r\n    if (this.state.pageController === SUMMARYPAGE) {\r\n      this.backToDefaultAllStates();\r\n    }\r\n    this.setState({\r\n      pageController: prevPage, //to page 1\r\n      username: \"\",\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Open or close the settings menu\r\n   */\r\n  switchSettingsMenu = () => {\r\n    this.setState({\r\n      gameModeSettingMenuOpen: !this.state.gameModeSettingMenuOpen,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Open or close the scores menu\r\n   */\r\n  switchScoresMenu = () => {\r\n    this.setState({\r\n      gameModeScoresMenuOpen: !this.state.gameModeScoresMenuOpen,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * In 4th page (the host) or the 6th page (the other players)\r\n   * to exit the room and tell the server\r\n   * There is a confirm window before the action of exiting really happens\r\n   */\r\n  exitRoomButtonPress = () => {\r\n    confirmAlert({\r\n      title: 'Confirm to Exit the Room',\r\n      message: 'Are you sure to do this?',\r\n      buttons: [\r\n        {\r\n          label: 'Yes',\r\n          onClick: () => {\r\n            //to prevent notification if press exit on page 4\r\n            clearTimeout(startGameButtonTimeObj);\r\n\r\n            this.setState({\r\n              loading: false,\r\n              startGameButtonDisabled: false\r\n            });\r\n\r\n            this.setState({\r\n              pageController: SELECTPAGE, //to page 3\r\n            });\r\n            socket.emit(EXIT_ROOM);\r\n\r\n            this.stopListenToGameEvent();\r\n            //set all of the game-related states back to default\r\n            this.backToDefaultAllStates();\r\n            //unlisten to this when exit the room\r\n            this.unlistenToServerDisconnect();\r\n          }\r\n        },\r\n        {\r\n          label: 'No',\r\n        }\r\n      ]\r\n    });\r\n  };\r\n\r\n  bugReportButtonClick = () => {\r\n    confirmAlert({\r\n      title: 'Bug Report',\r\n      message: 'You can email us at duslg0114@gmail.com',\r\n      buttons: [\r\n        {\r\n          label: 'Got it',\r\n        }\r\n      ]\r\n    });\r\n  }\r\n\r\n\r\n\r\n  exitSingleMode = () => {\r\n    this.backToDefaultSettings();\r\n    this.setState({ gameModeSettingMenuOpen: false });\r\n    this.setState({ pageController: HOMEPAGE });\r\n  }\r\n\r\n  /**\r\n   * When quittin gthe game, stop listening to all these events\r\n   */\r\n  stopListenToGameEvent = () => {\r\n    socket.removeAllListeners(TIMER);\r\n    socket.removeAllListeners(ROSTER);\r\n    socket.removeAllListeners(NEW_ROUND);\r\n    socket.removeAllListeners(END_ROUND);\r\n    socket.removeAllListeners(SOLUTION_INCORRECT);\r\n    socket.removeAllListeners(SOLUTION_CORRECT);\r\n    socket.removeAllListeners(PLAYER_SOLVED);\r\n    socket.removeAllListeners(END_GAME);\r\n  };\r\n  /**\r\n   * Set all the states back to their default value\r\n   * Needs further editing during the developing process\r\n   */\r\n  backToDefaultAllStates = () => {\r\n    this.backToDefaultSettings();\r\n    this.setState({\r\n      username: \"\",\r\n      gameModeSettingMenuOpen: false,\r\n      expressionInput: [],\r\n      answer: null,\r\n      roomNumber: null,\r\n      multiplayerGameNumbers: [],\r\n      multiplayerButtonDisable: [],\r\n      playerRoster: [],\r\n      playerSolved: [],\r\n      playerColor: [],\r\n      timeInGame: null,\r\n      whichRound: 0,\r\n      solution: \"\",\r\n      playerSolutions: [],\r\n      playerRanking: 1,\r\n      multiplayerScore: 0,\r\n      multiplayerTotalScore: 0,\r\n      answerCorrect: \"\",\r\n      scoreRanking: [],\r\n      attemptNum: 0,\r\n      submitButtonDisable: false,\r\n      loading: false,\r\n      startGameButtonDisabled: false\r\n    });\r\n  };\r\n  /**\r\n   * Use this function after starting connnecting to the server\r\n   * Reset everything to default just like exitRoomButton\r\n   */\r\n  listenToServerDisconnect = () => {\r\n    socket.on(DISCONNECT, () => {\r\n      this.notifyError(\"Disconnected from the Server, going back to the home page\");\r\n      this.stopListenToGameEvent();\r\n      //set all of the game-related states back to default\r\n      this.backToDefaultAllStates();\r\n      this.setState({\r\n        pageController: HOMEPAGE, //to page 1\r\n      });\r\n      //unlisten to the disconnect when go back to the home page\r\n      this.unlistenToServerDisconnect();\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Stop listening to the disconnect event\r\n   */\r\n  unlistenToServerDisconnect = () => {\r\n    socket.removeAllListeners(DISCONNECT);\r\n  };\r\n\r\n  /**\r\n   * In page 3\r\n   * The creator of the room uses this to request the server for a room\r\n   */\r\n  pressCreateRoomButton = () => {\r\n    if (!socket.connected) {\r\n      this.notifyError(\"You are not connected to our server\");\r\n    } else if (this.hasValidUsername()) {\r\n      socket.emit(CREATE_ROOM, this.state.username);\r\n      socket.once(CREATE_ROOM_SUCCESS, (roomNum) => {\r\n        this.listenToServerDisconnect();\r\n        this.setState({\r\n          pageController: HOSTPAGE, //to page 4\r\n          roomNumber: roomNum, //string\r\n          gameModeSettingMenuOpen: !this.state.gameModeSettingMenuOpen,\r\n        });\r\n\r\n        //be able to see who is currently in the room\r\n        //also be able to see who is in the room and who solved the problem during the game\r\n        socket.on(ROSTER, (roster) => {\r\n          this.setState({ playerRoster: roster });\r\n          this.setPlayerColor(roster);\r\n        });\r\n      });\r\n      socket.once(CREATE_ROOM_FAILURE, (msg) => {\r\n        this.notifyError(msg); //1. noRoomsAvailable - all room numbers are used\r\n      });\r\n    } else {\r\n      this.notifyError(\"please enter a valid nickname\");\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * set a hex color value for every player in the roster\r\n   * @param {object} roster player roster \r\n   */\r\n  setPlayerColor = (roster) => {\r\n    let copyPlayerColor = deepCopy(this.state.playerColor);\r\n    for (let playerName of roster) {\r\n      if (copyPlayerColor[playerName] === undefined) {\r\n        copyPlayerColor[playerName] = this.randomColor();\r\n      }\r\n    }\r\n    this.setState({ playerColor: copyPlayerColor });\r\n  };\r\n\r\n  /**\r\n   * In page 3\r\n   * The player (not the game host) goes to the 5th page where the room number he/she wants\r\n   * to join is to be entered\r\n   */\r\n  pressJoinRoomButton = () => {\r\n    if (!socket.connected) {\r\n      this.notifyError(\"You are not connected to our server\");\r\n    } else if (this.hasValidUsername()) {\r\n      this.setState({\r\n        pageController: JOINROOMPAGE, //to 5th page\r\n      });\r\n    } else {\r\n      this.notifyError(\"please enter a valid nickname\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * after 2 mins, still\r\n   */\r\n  failToStartGame = () => {\r\n    this.setState({ startGameButtonDisabled: false });\r\n    this.setState({ loading: false });\r\n    this.notifyError(\"Failed to connect to the server\");\r\n  };\r\n\r\n  /**\r\n   * In page 4th (the game setting page)\r\n   * the creator of the game room uses this function to start the multi-player game\r\n   */\r\n  pressStartGameButton = () => {\r\n    this.setState({ startGameButtonDisabled: true });\r\n    startGameButtonTimeObj = setTimeout(() => this.failToStartGame(), startGameTimtOutSec * 1000);\r\n\r\n    let settingPackageObject = {\r\n      numOfSlots: this.state.gameModeBasicSetting.slotNum, //int\r\n      targetNumber: this.state.gameModeBasicSetting.targetNum, //int\r\n      availableOperators: this.state.availableOperator, //array of string\r\n      rangeLo: this.state.rangeOfAvailableNumberLowBound, //int\r\n      rangeHi: this.state.rangeOfAvailableNumberHighBound, //int\r\n      maxNumOfRepeats: this.state.maxRepeatNum, //int\r\n      roundDuration: this.state.roundDuration * 1000, //int (ms)\r\n      numOfRounds: this.state.numOfRound, //int\r\n    };\r\n    socket.emit(START_GAME, settingPackageObject);\r\n    //console.log(\"start game message sent\");\r\n    this.setState({\r\n      loading: true\r\n    });\r\n    this.waitForStartGame();\r\n  };\r\n\r\n\r\n\r\n  /**\r\n   * Start the game after receive the GAME_STARTED\r\n   */\r\n  waitForStartGame = () => {\r\n    socket.once(GAME_STARTED, (settings) => {\r\n      //reset some of the states\r\n      clearTimeout(startGameButtonTimeObj);\r\n      this.setState({\r\n        loading: false,\r\n        startGameButtonDisabled: false\r\n      });\r\n      //go to the game page\r\n      this.setState({ pageController: COUNTDOWNPAGE, });\r\n      //adopt the settings set by the game host\r\n      this.reassignSettings(settings);\r\n      socket.on(TIMER, (time) => {\r\n        this.setState({ timeInGame: time });\r\n      });\r\n      socket.on(END_GAME, (playerRanking) => {\r\n        console.log(playerRanking);\r\n        this.setState({ scoreRanking: playerRanking });\r\n        this.setState({ pageController: SUMMARYPAGE, });\r\n\r\n        this.stopListenToGameEvent();\r\n        //unlisten to this when exit the room\r\n        this.unlistenToServerDisconnect();\r\n\r\n      });\r\n      socket.on(NEW_ROUND, ({ numbers, settings }) => {\r\n        console.log(\"NEW_ROUND\");\r\n        //increase the round number by 1\r\n        this.setState({ whichRound: this.state.whichRound + 1 });\r\n        this.setState({ answer: null });\r\n        this.reassignSettings(settings);\r\n        this.setState({ expressionInput: [] });\r\n        this.setState({ multiplayerGameNumbers: numbers });\r\n        this.setState({ playerSolved: [] });\r\n        this.setState({ answerCorrect: undefined });\r\n        //give each player three attempts each round\r\n        this.setState({ attemptNum: 3 });\r\n        //create a multiplayerButtonDisable array that has the same length as multiplayerGameNumbers\r\n        this.createButtonDisableStatus(numbers);\r\n        //always put the page changing mechanism at the end to insure proper rendering\r\n        this.setState({ pageController: MULTIGAMEPAGE, });\r\n        //listen to the response from the server about the correctness of the submitted answer\r\n        socket.on(SOLUTION_CORRECT, ({ score, totalScore }) => {\r\n          this.setState({\r\n            multiplayerScore: score,\r\n            multiplayerTotalScore: totalScore,\r\n            answerCorrect: true,\r\n            submitButtonDisable: true,\r\n          });\r\n\r\n          this.notifySuccess(`🦄 Your solution is correct!`);\r\n          console.log(\"SOLUTION_CORRECT\");\r\n        });\r\n        socket.on(SOLUTION_INCORRECT, ({ deductedScore, totalScore }) => {\r\n          this.setState({\r\n            multiplayerTotalScore: totalScore,\r\n            answerCorrect: false,\r\n          });\r\n          this.notifyError(`Your solution is incorrect. You have ${this.state.attemptNum} attempts left`);\r\n          console.log(\"SOLUTION_INCORRECT\");\r\n        });\r\n        //updating the roster on the side of the gameboard\r\n        socket.on(PLAYER_SOLVED, (playerSolved) => {\r\n          this.setState({ playerSolved: playerSolved });\r\n          console.log(\"PLAYER_SOLVED\");\r\n        });\r\n      });\r\n\r\n      socket.on(END_ROUND, ({ solution, playerSolutions, scoreRanking, playerRanking }) => {\r\n        console.log(\"END_ROUND\");\r\n        if (solution === null) {\r\n          this.setState({ solution: \"no solution for this problem\" });\r\n        } else {\r\n          this.setState({ solution: solution });\r\n        }\r\n        this.setState({\r\n          playerSolutions: playerSolutions,\r\n          playerRanking: playerRanking,\r\n          scoreRanking: scoreRanking\r\n        });\r\n        //empty some states to prepare for the next round\r\n\r\n        this.setState({ multiplayerScore: 0 });\r\n\r\n\r\n\r\n        this.setState({ submitButtonDisable: false });\r\n        //stop listen to some game events to prevent duplicate listeners on the same event\r\n        socket.removeAllListeners(SOLUTION_INCORRECT);\r\n        socket.removeAllListeners(SOLUTION_CORRECT);\r\n        socket.removeAllListeners(PLAYER_SOLVED);\r\n        //always put the page changing mechanism at the end to insure proper rendering\r\n        this.setState({ pageController: BTWROUNDPAGE });\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * create the multiplayerButtonDisable default state\r\n   * @param {array of int} numbers the game numbers passed by the server\r\n   */\r\n  createButtonDisableStatus = (numbers) => {\r\n    let buttonDisableStatus = [];\r\n    for (let i = 0; i < numbers.length; i++) {\r\n      buttonDisableStatus.push(false);\r\n    }\r\n    this.setState({ multiplayerButtonDisable: buttonDisableStatus });\r\n  }\r\n\r\n  /**\r\n   * Check whether or not the current round is the last round of this game\r\n   */\r\n  isLastRound = () => {\r\n    if (this.state.whichRound === this.state.numOfRound) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  /**\r\n   * This function is used when the server sends settings data to the client\r\n   * @param settings all of the settings parameters\r\n   */\r\n  reassignSettings = ({ numOfSlots, targetNumber, availableOperators, rangeLo,\r\n    rangeHi, maxNumOfRepeats, roundDuration, numOfRounds }) => {\r\n    this.setState({\r\n      gameModeBasicSetting: { slotNum: numOfSlots, targetNum: targetNumber },\r\n      availableOperator: availableOperators,\r\n      rangeOfAvailableNumberLowBound: rangeLo,\r\n      rangeOfAvailableNumberHighBound: rangeHi,\r\n      maxRepeatNum: maxNumOfRepeats,\r\n      roundDuration: roundDuration / 1000, //the unit for server is ms, for client it is s\r\n      numOfRound: numOfRounds\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * in page 5\r\n   * the player presses this button to enter the game room with the specified room number\r\n   * The non-host way to enter the gameroom\r\n   */\r\n\r\n  pressJoinRoomKeyButton = () => {\r\n    socket.emit(JOIN_ROOM, {\r\n      username: this.state.username,\r\n      room: this.state.roomNumber,\r\n    });\r\n\r\n    socket.once(JOIN_ROOM_SUCCESS, () => {\r\n      this.listenToServerDisconnect();\r\n      this.setState({\r\n        pageController: WAITFORHOSTPAGE,\r\n      });\r\n      //be able to see the current players waiting in the room while in the wait room\r\n      //also be able to see the player list and who has solved the problem in the game room\r\n      socket.on(ROSTER, (roster) => {\r\n        this.setState({ playerRoster: roster });\r\n        this.setPlayerColor(roster);\r\n      });\r\n      //start to wait for the host to start the game and then go to the \"multiPlayerGamePage\"\r\n      this.waitForStartGame();\r\n\r\n      //if the host of the room exits, all the players go back to the third page\r\n      socket.once(ROOM_CLOSED, () => {\r\n        this.notifyError(\"The host has closed the room. You are removed from the room\");\r\n        this.setState({ pageController: SELECTPAGE });\r\n      })\r\n    });\r\n\r\n    socket.once(JOIN_ROOM_FAILURE, (msg) => {\r\n      switch (msg) {\r\n        case \"roomDoesNotExist\":\r\n          this.notifyError(\"This room does not exist, please try another room number\");\r\n          break;\r\n        case \"invalidRoomNumber\":\r\n          this.notifyError(\"The room number entered is not valid. It is a 4-digit number\");\r\n          break;\r\n        case \"usernameTaken\":\r\n          this.notifyError(\"The username has already been taken, please try another username\");\r\n          break;\r\n        case \"gameInProgress\":\r\n          this.notifyError(\"The game has already started in this room. You can either wait until the game finishes or enter another room instead\");\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * In page 1st\r\n   * enter the single mode\r\n   */\r\n  pressSinglePlayModeButton = () => {\r\n    this.setState({\r\n      pageController: SINGLEGAMEPAGE, //to page 8th\r\n    });\r\n  };\r\n\r\n  /**\r\n   * change the value of the number of slots for multi-player game\r\n   */\r\n  handleSlotNumChange = (event) => {\r\n    let copy_gameModeSetting = { ...this.state.gameModeBasicSetting };\r\n    copy_gameModeSetting.slotNum = parseInt(event.target.value, 10);\r\n    this.setState({ gameModeBasicSetting: copy_gameModeSetting });\r\n  };\r\n\r\n  /**\r\n   * When no solution exists for the current problem\r\n   * sends null to the server in the SEND_SOLUTION event\r\n   */\r\n  pressNoSolutionButton = () => {\r\n    this.setState({ attemptNum: this.state.attemptNum - 1 });\r\n    socket.emit(SEND_SOLUTION, null);\r\n  };\r\n\r\n  /**\r\n   *\r\n   * change the value of the target number for multi-player game\r\n   */\r\n  handleTargetNumChange = (event) => {\r\n    let copy_gameModeSetting = { ...this.state.gameModeBasicSetting };\r\n    copy_gameModeSetting.targetNum = parseInt(event.target.value, 10);\r\n    this.setState({ gameModeBasicSetting: copy_gameModeSetting });\r\n  };\r\n\r\n  /**\r\n   * save the menu setting, close the display, and send the data to the server side\r\n   */\r\n  pressMenuCloseButton = () => {\r\n    this.setState({\r\n      gameModeSettingMenuOpen: !this.state.gameModeSettingMenuOpen,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Change the multi-player game settings back to default value\r\n   */\r\n  backToDefaultSettings = () => {\r\n    this.setState({\r\n      gameModeBasicSetting: { slotNum: 4, targetNum: 24 },\r\n      availableOperator: [TIMES, DIVIDES, PLUS, MINUS],\r\n      rangeOfAvailableNumberLowBound: 1,\r\n      rangeOfAvailableNumberHighBound: 13,\r\n      maxRepeatNum: 4,\r\n      roundDuration: 30,\r\n      numOfRound: 10,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * set the username from the user input\r\n   */\r\n  setStateName = (event) => {\r\n    this.setState({ username: event.target.value });\r\n  };\r\n\r\n  /**\r\n   * set the value for rangeOfAvailableNumberLowBound\r\n   */\r\n  handleRangeOfAvailableNumberLowBoundInput = (event) => {\r\n    let value = parseInt(event.target.value, 10);\r\n    if (isNaN(value)) {\r\n      this.setState({ rangeOfAvailableNumberLowBound: \"\" });\r\n      return;\r\n    } else if (value < 1) {\r\n      this.notifyError(\"The Lower Bound of Range Must be At Least 1\");\r\n      return;\r\n    } else if (value > this.state.rangeOfAvailableNumberHighBound) {\r\n      this.notifyError(\"The Lower Bound of Range Must be Smaller or Equal to the Upper Bound\");\r\n      return;\r\n    }\r\n    this.setState({ rangeOfAvailableNumberLowBound: value });\r\n  };\r\n\r\n  /**\r\n   * set the value for rangeOfAvailableNumberHighBound\r\n   */\r\n  handleRangeOfAvailableNumberHighBoundInput = (event) => {\r\n    let value = parseInt(event.target.value, 10);\r\n    if (isNaN(value)) {\r\n      this.setState({ rangeOfAvailableNumberHighBound: \"\" });\r\n      return;\r\n    } else if (value > 13) {\r\n      this.notifyError(\"The Upper Bound of Range Must be no More than 13\");\r\n      return;\r\n    } else if (value < this.state.rangeOfAvailableNumberLowBound) {\r\n      this.notifyError(\"The Upper Bound of Range Must be Larger or Equal to the Lower Bound\");\r\n      return;\r\n    }\r\n    this.setState({ rangeOfAvailableNumberHighBound: parseInt(event.target.value, 10) });\r\n  };\r\n\r\n  /**\r\n   * set the value for maxRepeatNumInput\r\n   */\r\n  handleMaxRepeatNumInput = (event) => {\r\n    this.setState({ maxRepeatNum: parseInt(event.target.value, 10) });\r\n  };\r\n\r\n  /**\r\n   * set the value for the time of each round\r\n   */\r\n  handleRoundDurationInput = (event) => {\r\n    this.setState({ roundDuration: parseInt(event.target.value, 10) });\r\n  };\r\n\r\n  /**\r\n   * used by the slider that accepts only 10, 15, or 20 for the number of round per game\r\n   */\r\n  handleNumOfRoundInput = (event) => {\r\n    let num = event.target.value;\r\n    if (num < 13) {\r\n      num = 10;\r\n    } else if (num < 17) {\r\n      num = 15;\r\n    } else {\r\n      num = 20;\r\n    }\r\n    this.setState({ numOfRound: num });\r\n  };\r\n\r\n\r\n  /**\r\n   *\r\n   * @param {string} ops turn on or off the operator passed in\r\n   */\r\n  operatorSwitch = (ops) => {\r\n    if (this.state.availableOperator.includes(ops)) {\r\n      //the minimum number of operators is 2\r\n      if (this.state.availableOperator.length <= 2) {\r\n        this.notifyError(\"You must have at least two available operators\");\r\n        return;\r\n      }\r\n      this.setState({\r\n        availableOperator: this.filterArray(\r\n          this.state.availableOperator,\r\n          ops\r\n        ),\r\n      });\r\n    } else {\r\n      let copy_availableOperator = [...this.state.availableOperator];\r\n      copy_availableOperator.push(ops);\r\n      this.setState({\r\n        availableOperator: copy_availableOperator,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * the checkbox that controls the available operators during the game\r\n   * @param {checkbox} event\r\n   */\r\n  handleAvailableOperatorCheckbox = (event) => {\r\n    let selectValue = event.target.value;\r\n    switch (selectValue) {\r\n      case TIMES:\r\n        this.operatorSwitch(TIMES);\r\n        break;\r\n      case DIVIDES:\r\n        this.operatorSwitch(DIVIDES);\r\n        break;\r\n      case PLUS:\r\n        this.operatorSwitch(PLUS);\r\n        break;\r\n      case MINUS:\r\n        this.operatorSwitch(MINUS);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * When press the button, add the corresponding number or operator to the input expression\r\n   * @param {int} eachNum the number or operator string associated with the button\r\n   */\r\n  addNumToInput = (eachNum, index) => {\r\n    let copy_disableStatus = [...this.state.multiplayerButtonDisable];\r\n    let copy_expressionInput = [...this.state.expressionInput];\r\n    //disable the button being clicked\r\n    if (copy_disableStatus[index] === false) {\r\n      copy_disableStatus[index] = true;\r\n    }\r\n    this.setState({ multiplayerButtonDisable: copy_disableStatus });\r\n    copy_expressionInput.push(eachNum.toString());\r\n    this.setState({ expressionInput: copy_expressionInput });\r\n  }\r\n\r\n  /**\r\n   * When click the \"DEL\" button, delete a number or operator string from the input expression\r\n   */\r\n  pressDeleteInputButton = () => {\r\n    let copy_expressionInput = [...this.state.expressionInput];\r\n    if (copy_expressionInput.length >= 0) {\r\n      let deletedNum = parseInt(copy_expressionInput.pop(), 10);\r\n      //find the first button that has the deleted number can recover its clickability\r\n      for (let i = 0; i < this.state.multiplayerGameNumbers.length; i++) {\r\n        if (deletedNum === this.state.multiplayerGameNumbers[i] && this.state.multiplayerButtonDisable[i] === true) {\r\n          let copy_disableStatus = [...this.state.multiplayerButtonDisable];\r\n          copy_disableStatus[i] = false;\r\n          this.setState({ multiplayerButtonDisable: copy_disableStatus });\r\n          break;\r\n        }\r\n      }\r\n      this.setState({ expressionInput: copy_expressionInput });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This is able to handle digits other than 4\r\n   * @param {int} num the number whose digits are going to be separated\r\n   * @returns {array of int} the digits of the number from left to right\r\n   */\r\n  getDigits = (num) => {\r\n    //create an int array with this.state.roomNumMaxDigitNum as the number of entries\r\n    let digits = [];\r\n    for (let i = this.state.roomNumMaxDigitNum - 1; i >= 0; i--) {\r\n      digits.push(0);\r\n    }\r\n\r\n    //build the int array with the digit from the num. Padding array with 0 if num doesn't have that many digits\r\n    let digits_lastIndex = digits.length - 1;\r\n    while (num >= 10) {\r\n      digits[digits_lastIndex] = num % 10;\r\n      digits_lastIndex -= 1;\r\n      num = Math.floor(num / 10);\r\n    }\r\n    digits[digits_lastIndex] = num;\r\n    return digits;\r\n  }\r\n\r\n  /**\r\n   * This is able to handle digits other than 4\r\n   * @param {array of int} digits the digits of the number from left to right\r\n   * @returns {int} the number represented by the input digits array\r\n   */\r\n  reformNumber = (digits) => {\r\n    let timeFactor = 1;\r\n    let number = 0;\r\n    for (let i = this.state.roomNumMaxDigitNum - 1; i >= 0; i--) {\r\n      number += timeFactor * digits[i];\r\n      timeFactor *= 10;\r\n    }\r\n    return number;\r\n  }\r\n  /**\r\n   * This has not yet been able to handle digits other than 4 (due to the switch case part)\r\n   * Set the value of the room number with four separate input boxes\r\n   * @param {onChange} e\r\n   */\r\n  setRoomNum = (e) => {\r\n    if (e.target.value.length === 0) {\r\n      return;\r\n    }\r\n    let roomNumber = this.state.roomNumber;\r\n    let digits = this.getDigits(roomNumber);\r\n    if (e.target.value.length > e.target.maxLength) {\r\n      e.target.value = e.target.value.slice(0, 1);\r\n    }\r\n    let digit = e.target.value;\r\n    switch (e.target.id) {\r\n      case \"first\":\r\n        digits[0] = digit;\r\n        this.setState({ roomNumber: this.reformNumber(digits) });\r\n        break;\r\n      case \"second\":\r\n        digits[1] = digit;\r\n        this.setState({ roomNumber: this.reformNumber(digits) });\r\n        break;\r\n      case \"third\":\r\n        digits[2] = digit;\r\n        this.setState({ roomNumber: this.reformNumber(digits) });\r\n        break;\r\n      case \"last\":\r\n        digits[3] = digit;\r\n        this.setState({ roomNumber: this.reformNumber(digits) });\r\n        break;\r\n    }\r\n  };\r\n\r\n\r\n\r\n  /**\r\n   * calculate the value of the inputed expression and send the expression to the server if it's valid\r\n   */\r\n  pressCalculateResultButton = () => {\r\n    this.setState({ attemptNum: this.state.attemptNum - 1 });\r\n    if (checkValid(this.state.expressionInput)) { //check the basic validity\r\n      let result = calculate(this.state.expressionInput);\r\n      if (result === \"Invalid\") {\r\n        this.notifyError(`The Expression is Invalid. You have ${this.state.attemptNum - 1} attempts left`);\r\n        this.setState({ answer: \"\" });\r\n      } else if (!this.areAllNumbersUsed()) {\r\n        this.notifyError(`You must use all of the given numbers. You have ${this.state.attemptNum - 1} attempts left`);\r\n        this.setState({ answer: \"\" });\r\n      } else {\r\n        this.setState({ answer: result });\r\n        socket.emit(SEND_SOLUTION, this.state.expressionInput);\r\n      }\r\n    }\r\n\r\n    else {\r\n      this.notifyError(`The Expression is Invalid. You have ${this.state.attemptNum - 1} attempts left`);\r\n      this.setState({ answer: \"\" });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns whether or not all the numbers (slots) are used during the game\r\n   */\r\n  areAllNumbersUsed = () => {\r\n    for (let i = 0; i < this.state.multiplayerButtonDisable.length; i++) {\r\n      if (this.state.multiplayerButtonDisable[i] === false) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * When enter the hostpage, start counting down the timer until the game starts or \r\n   * force the game to start at 0s\r\n   */\r\n  startCountDown = () => {\r\n    let countDownInterval = setInterval(() => {\r\n      if (this.state.waitTimeMax === 0) {\r\n        clearInterval(countDownInterval);\r\n        this.pressStartGameButton();\r\n      } else {\r\n        this.setState({ waitTimeMax: this.state.waitTimeMax - 1 });\r\n      }\r\n    },\r\n      1000);\r\n  };\r\n\r\n\r\n\r\n  //page display switch function\r\n  renderSwitch(pageName) {\r\n    switch (pageName) {\r\n      case HOMEPAGE: //1\r\n        return (\r\n          <HomePage\r\n            pressSolveModeButton={this.pressSolveModeButton}\r\n            pressGameModeButton={this.pressGameModeButton}\r\n            pressSinglePlayModeButton={this.pressSinglePlayModeButton}\r\n            lang={this.state.lang}\r\n            langChange={this.langChange}\r\n            bugReportButtonClick={this.bugReportButtonClick}\r\n          ></HomePage>\r\n        );\r\n      case SOLVEPAGE: //2\r\n        return (\r\n          <SolvePage\r\n            handleBack={this.handleBack}\r\n            notifyError={this.notifyError}\r\n          ></SolvePage>\r\n        );\r\n      case SELECTPAGE: //3\r\n        return (\r\n          <SelectPage\r\n            handleBack={this.handleBack}\r\n            setStateName={this.setStateName}\r\n            pressCreateRoomButton={this.pressCreateRoomButton}\r\n            pressJoinRoomButton={this.pressJoinRoomButton}\r\n          ></SelectPage>\r\n        );\r\n      case HOSTPAGE: //4\r\n        return (\r\n          <HostPage\r\n            startGameButtonDisabled={this.state.startGameButtonDisabled}\r\n            gameModeSettingMenuOpen={this.state.gameModeSettingMenuOpen}\r\n            handleSlotNumChange={this.handleSlotNumChange}\r\n            handleTargetNumChange={this.handleTargetNumChange}\r\n            pressMenuCloseButton={this.pressMenuCloseButton}\r\n            handleRangeOfAvailableNumberLowBoundInput={\r\n              this.handleRangeOfAvailableNumberLowBoundInput\r\n            }\r\n            handleRangeOfAvailableNumberHighBoundInput={\r\n              this.handleRangeOfAvailableNumberHighBoundInput\r\n            }\r\n            handleMaxRepeatNumInput={this.handleMaxRepeatNumInput}\r\n            handleRoundDurationInput={this.handleRoundDurationInput}\r\n            handleNumOfRoundInput={this.handleNumOfRoundInput}\r\n            handleAvailableOperatorCheckbox={\r\n              this.handleAvailableOperatorCheckbox\r\n            }\r\n            backToDefaultSettings={this.backToDefaultSettings}\r\n            slotNum={this.state.gameModeBasicSetting.slotNum}\r\n            targetNum={this.state.gameModeBasicSetting.targetNum}\r\n            rangeOfAvailableNumberLowBound={\r\n              this.state.rangeOfAvailableNumberLowBound\r\n            }\r\n            rangeOfAvailableNumberHighBound={\r\n              this.state.rangeOfAvailableNumberHighBound\r\n            }\r\n            maxRepeatNum={this.state.maxRepeatNum}\r\n            roundDuration={this.state.roundDuration}\r\n            numOfRound={this.state.numOfRound}\r\n            availableOperator={this.state.availableOperator}\r\n            exitRoomButtonPress={this.exitRoomButtonPress}\r\n            username={this.state.username}\r\n            roomNumber={this.state.roomNumber}\r\n            pressStartGameButton={this.pressStartGameButton}\r\n            playerRoster={this.state.playerRoster}\r\n            playerSolved={this.state.playerSolved}\r\n            playerColor={this.state.playerColor}\r\n            pageController={this.state.pageController}\r\n            switchSettingsMenu={this.switchSettingsMenu}\r\n            startCountDown={this.startCountDown}\r\n            setGameModeSettingMenuOpenFalse={this.setGameModeSettingMenuOpenFalse}\r\n            maxPlayerNum={this.state.maxPlayerNum}\r\n          ></HostPage>\r\n        );\r\n      case JOINROOMPAGE: //5\r\n        return (\r\n          <JoinRoomPage\r\n            handleBack={this.handleBack}\r\n            username={this.state.username}\r\n            setStateName={this.setStateName}\r\n            setRoomNum={this.setRoomNum}\r\n            roomNumber={this.state.roomNumber}\r\n            pressJoinRoomKeyButton={this.pressJoinRoomKeyButton}\r\n          ></JoinRoomPage>\r\n        );\r\n      case WAITFORHOSTPAGE: //6\r\n        return (\r\n          <WaitForHostPage\r\n            exitRoomButtonPress={this.exitRoomButtonPress}\r\n            playerRoster={this.state.playerRoster}\r\n            playerSolved={this.state.playerSolved}\r\n            playerColor={this.state.playerColor}\r\n            roomNumber={this.state.roomNumber}\r\n            maxPlayerNum={this.state.maxPlayerNum}\r\n            pageController={this.state.pageController}\r\n          ></WaitForHostPage>\r\n        );\r\n      case MULTIGAMEPAGE: //7\r\n        return (\r\n          <MultiGamePage\r\n            setGameModeScoresMenuOpenFalse={this.setGameModeScoresMenuOpenFalse}\r\n            switchScoresMenu={this.switchScoresMenu}\r\n            gameModeScoresMenuOpen={this.state.gameModeScoresMenuOpen}\r\n            exitRoomButtonPress={this.exitRoomButtonPress}\r\n            multiplayerTotalScore={this.state.multiplayerTotalScore}\r\n            username={this.state.username}\r\n            whichRound={this.state.whichRound}\r\n            numOfRound={this.state.numOfRound}\r\n            gameNumbers={this.state.multiplayerGameNumbers}\r\n            addNumToInput={this.addNumToInput}\r\n            expressionInput={this.state.expressionInput}\r\n            targetNum={this.state.gameModeBasicSetting.targetNum}\r\n            operators={this.state.availableOperator}\r\n            pressDeleteInputButton={this.pressDeleteInputButton}\r\n            pressCalculateResultButton={this.pressCalculateResultButton}\r\n            answer={this.state.answer}\r\n            multiplayerButtonDisable={this.state.multiplayerButtonDisable}\r\n            answerCorrect={this.state.answerCorrect}\r\n            pressNoSolutionButton={this.pressNoSolutionButton}\r\n            submitButtonDisable={this.state.submitButtonDisable}\r\n            timeInGame={this.state.timeInGame}\r\n            playerRosterLength={this.state.playerRoster.length}\r\n            playerSolvedLength={this.state.playerSolved.length}\r\n            playerRoster={this.state.playerRoster}\r\n            playerSolved={this.state.playerSolved}\r\n            playerColor={this.state.playerColor}\r\n            attemptNum={this.state.attemptNum}\r\n            pageController={this.state.pageController}\r\n          ></MultiGamePage>\r\n        );\r\n      case SINGLEGAMEPAGE: //8\r\n        return (\r\n          <SingleGamePage\r\n            gameModeSettingMenuOpen={this.state.gameModeSettingMenuOpen}\r\n            slotNum={this.state.gameModeBasicSetting.slotNum}\r\n            targetNum={this.state.gameModeBasicSetting.targetNum}\r\n            rangeOfAvailableNumberLowBound={\r\n              this.state.rangeOfAvailableNumberLowBound\r\n            }\r\n            rangeOfAvailableNumberHighBound={\r\n              this.state.rangeOfAvailableNumberHighBound\r\n            }\r\n            maxRepeatNum={this.state.maxRepeatNum}\r\n            roundDuration={this.state.roundDuration}\r\n            numOfRound={this.state.numOfRound}\r\n            availableOperator={this.state.availableOperator}\r\n            handleSlotNumChange={this.handleSlotNumChange}\r\n            handleTargetNumChange={this.handleTargetNumChange}\r\n            pressMenuCloseButton={this.pressMenuCloseButton}\r\n            handleRangeOfAvailableNumberLowBoundInput={\r\n              this.handleRangeOfAvailableNumberLowBoundInput\r\n            }\r\n            handleRangeOfAvailableNumberHighBoundInput={\r\n              this.handleRangeOfAvailableNumberHighBoundInput\r\n            }\r\n            handleMaxRepeatNumInput={this.handleMaxRepeatNumInput}\r\n            handleRoundDurationInput={this.handleRoundDurationInput}\r\n            handleNumOfRoundInput={this.handleNumOfRoundInput}\r\n            handleAvailableOperatorCheckbox={\r\n              this.handleAvailableOperatorCheckbox\r\n            }\r\n            backToDefaultSettings={this.backToDefaultSettings}\r\n            exitRoomButtonPress={this.exitSingleMode}\r\n            switchSettingsMenu={this.switchSettingsMenu}\r\n            setGameModeSettingMenuOpenFalse={this.setGameModeSettingMenuOpenFalse}\r\n\r\n          ></SingleGamePage>\r\n        );\r\n      case LOADINGPAGE: //9: currently just for the host\r\n        return (\r\n          <LoadingPage\r\n            exitRoomButtonPress={this.exitRoomButtonPress}\r\n          ></LoadingPage>\r\n        );\r\n      case COUNTDOWNPAGE: //10: for both the host and the player\r\n        return (\r\n          <CountDownPage\r\n            timeInGame={this.state.timeInGame}\r\n            exitRoomButtonPress={this.exitRoomButtonPress}\r\n          ></CountDownPage>\r\n        );\r\n      case BTWROUNDPAGE: //11: the page being displayed between each round of the game\r\n        return (\r\n          <BetweenRoundPage\r\n            //expressionInput={\"1x2x3x4\"}\r\n            expressionInput={this.state.expressionInput}\r\n            setGameModeScoresMenuOpenFalse={this.setGameModeScoresMenuOpenFalse}\r\n            exitRoomButtonPress={this.exitRoomButtonPress}\r\n            switchScoresMenu={this.switchScoresMenu}\r\n            gameModeScoresMenuOpen={this.state.gameModeScoresMenuOpen}\r\n            numOfRound={this.state.numOfRound}\r\n            multiplayerTotalScore={this.state.multiplayerTotalScore}\r\n            playerRoster={this.state.playerRoster}\r\n            playerSolved={this.state.playerSolved}\r\n            pageController={this.state.pageController}\r\n            playerColor={this.state.playerColor}\r\n            whichRound={this.state.whichRound}\r\n            solution={this.state.solution}\r\n            //solution={\"1x2x3x4\"}\r\n            playerSolutions={this.state.playerSolutions}\r\n            //playerSolutions={[{ name: \"Duasdfasdgasdg\", solution: \"\" }, { name: \"Duasdfasdgasdgasdg\", solution: \"1+2+4+5*5+23\" }, { name: \"Du\", solution: \"1+2+4+5*5+23\" }]}\r\n            timeInGame={this.state.timeInGame}\r\n            //timeInGame={6}\r\n            playerRanking={this.state.playerRanking}\r\n            scoreRanking={this.state.scoreRanking}\r\n            //scoreRanking={[{ name: \"Josepe\", totalScore: 123 }, { name: \"Joseph\", totalScore: 123 }, { name: \"Joseph\", totalScore: 123 }]}\r\n            isLastRound={this.isLastRound()}\r\n            answerCorrect={this.state.answerCorrect}\r\n            //answerCorrect={true}\r\n            hostAnswer={this.state.answer}\r\n          ></BetweenRoundPage>\r\n        );\r\n      case SUMMARYPAGE: //12: the page at the end of the game (after receiving \"endGame\")\r\n        return (\r\n          <SummaryPage\r\n            exitRoomButtonPress={this.exitRoomButtonPress}\r\n            scoreRanking={this.state.scoreRanking}\r\n          //scoreRanking={[{ name: \"Josepe\", totalScore: 123 }, { name: \"Joseph\", totalScore: 123 }, { name: \"Joseph\", totalScore: 123 }]}\r\n          ></SummaryPage>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    return (\r\n      <div className=\"h-100 bg-color\">\r\n        <Helmet>\r\n          <meta charSet=\"UTF-8\" />\r\n          <title>\r\n            {this.state.gameModeBasicSetting.targetNum.toString(10)}-points-game\r\n          </title>\r\n          <meta\r\n            name=\"description\"\r\n            content=\"This is an online platform for playing 24-point-game with your friends\"\r\n          />\r\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n          <style type=\"text/css\">{`\r\n            .bg-color {\r\n              background-color: white;\r\n            }\r\n            input::-webkit-outer-spin-button,\r\n            input::-webkit-inner-spin-button {\r\n              -webkit-appearance: none;\r\n              margin: 0;\r\n            }\r\n\r\n            /* Firefox */\r\n            input[type=number] {\r\n              -moz-appearance: textfield;\r\n            }\r\n          `}</style>\r\n          <link rel=\"shortcut icon\" href={tabImage} />\r\n          <style>\r\n            @import url('https://fonts.googleapis.com/css2?family=Lexend+Zetta&display=swap');\r\n          </style>import {deepCopy} from './components/deepCopy';\r\n\r\n        </Helmet>\r\n        {this.renderSwitch(this.state.pageController)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(App);\r\n","import React from \"react\";\r\nimport BackButton from \"./common/BackButton\";\r\nimport ScoresRank from \"./ScoresRank\";\r\nimport { HOMEPAGE } from './roomConst';\r\nimport ExitRoomButton from './common/ExitRoomButton';\r\n\r\nconst SummaryPage = (props) => {\r\n  return (\r\n    <div className=\"d-flex flex-column\">\r\n      <div style={{ marginTop: \"1.4rem\" }}>\r\n        <ExitRoomButton\r\n          onCancel={props.exitRoomButtonPress}\r\n        />\r\n      </div>\r\n      <h1 className=\"align-self-center fnt-bold\" style={{ marginBottom: \"3rem\" }}>Final Ranking</h1>\r\n      <ScoresRank\r\n        scoreRanking={props.scoreRanking}\r\n      //scoreRanking={[{ name: \"Xin\", totalScore: 2 }, { name: \"Xin\", totalScore: 2 }, { name: \"Xin\", totalScore: 2 }, { name: \"Xin\", totalScore: 2 }, { name: \"Xin\", totalScore: 2 }, { name: \"Xin\", totalScore: 2 }, { name: \"Xin\", totalScore: 2 }]}\r\n      ></ScoresRank>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SummaryPage;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\nimport Backend from 'i18next-http-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\n// don't want to use this?\r\n// have a look at the Quick start guide \r\n// for passing in lng and translations on init\r\n\r\nconst Languages = ['en', 'zh'];\r\n\r\ni18n\r\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-http-backend\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    fallbackLng: 'en',\r\n    debug: true,\r\n    whitelist: Languages,\r\n\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    }\r\n  });\r\n\r\n\r\nexport default i18n;","import React, { Suspense } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert';\r\nimport AlertTemplate from 'react-alert-template-basic';\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"bootstrap/dist/js/bootstrap.js\";\r\nimport './i18next.js';\r\n\r\n// optional configuration\r\nconst options = {\r\n  // you can also just use 'bottom center'\r\n  position: positions.BOTTOM_CENTER,\r\n  timeout: 5000,\r\n  offset: '30px',\r\n  // you can also just use 'scale'\r\n  transition: transitions.SCALE\r\n}\r\n\r\nconsole.log(process.env);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Suspense fallback={(<div>Loading...</div>)}>\r\n      <AlertProvider template={AlertTemplate} {...options}>\r\n        <App />\r\n        <link href=\"https://fonts.googleapis.com/css?family=Titillium+Web:300,400,700\" rel=\"stylesheet\"></link>\r\n      </AlertProvider>\r\n    </Suspense>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/tabImage.714dd211.png\";"],"sourceRoot":""}